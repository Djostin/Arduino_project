
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000009d0  00000a64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800104  00800104  00000a68  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e5c  00000000  00000000  00000bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a9  00000000  00000000  00001a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000087b  00000000  00000000  000023bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  00002c38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c1  00000000  00000000  00002ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000656  00000000  00000000  0000347d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003ad3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ed       	ldi	r30, 0xD0	; 208
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 32       	cpi	r26, 0x2E	; 46
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <main>
  9e:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.            
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  b0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <SCH_tasks_G>
  b4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <SCH_tasks_G+0x1>
  b8:	89 2b       	or	r24, r25
  ba:	81 f0       	breq	.+32     	; 0xdc <SCH_Add_Task+0x36>
  bc:	e6 e0       	ldi	r30, 0x06	; 6
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
  c4:	82 2f       	mov	r24, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  c6:	e9 01       	movw	r28, r18
  c8:	a7 81       	ldd	r26, Z+7	; 0x07
  ca:	b0 85       	ldd	r27, Z+8	; 0x08
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	37 96       	adiw	r30, 0x07	; 7
  d2:	ab 2b       	or	r26, r27
  d4:	b9 f7       	brne	.-18     	; 0xc4 <SCH_Add_Task+0x1e>
   {
      Index++;
   }

   // Have we reached the end of the list?   
   if(Index == SCH_MAX_TASKS)
  d6:	85 30       	cpi	r24, 0x05	; 5
  d8:	21 f4       	brne	.+8      	; 0xe2 <SCH_Add_Task+0x3c>
  da:	15 c0       	rjmp	.+42     	; 0x106 <SCH_Add_Task+0x60>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
  e0:	80 e0       	ldi	r24, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;  
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
  e2:	fe 01       	movw	r30, r28
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ec 1b       	sub	r30, r28
  f2:	fd 0b       	sbc	r31, r29
  f4:	ea 5f       	subi	r30, 0xFA	; 250
  f6:	fe 4f       	sbci	r31, 0xFE	; 254
  f8:	11 83       	std	Z+1, r17	; 0x01
  fa:	00 83       	st	Z, r16
   SCH_tasks_G[Index].Delay =DELAY;
  fc:	73 83       	std	Z+3, r23	; 0x03
  fe:	62 83       	std	Z+2, r22	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
 100:	55 83       	std	Z+5, r21	; 0x05
 102:	44 83       	std	Z+4, r20	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
 104:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
 110:	27 e0       	ldi	r18, 0x07	; 7
 112:	82 9f       	mul	r24, r18
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	fc 01       	movw	r30, r24
 11a:	ea 5f       	subi	r30, 0xFA	; 250
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
 122:	13 82       	std	Z+3, r1	; 0x03
 124:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
 126:	15 82       	std	Z+5, r1	; 0x05
 128:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
 12a:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret

00000130 <SCH_Dispatch_Tasks>:
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	c6 e0       	ldi	r28, 0x06	; 6
 13c:	d1 e0       	ldi	r29, 0x01	; 1
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 13e:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
 140:	8e 81       	ldd	r24, Y+6	; 0x06
 142:	88 23       	and	r24, r24
 144:	79 f0       	breq	.+30     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 146:	e8 81       	ld	r30, Y
 148:	f9 81       	ldd	r31, Y+1	; 0x01
 14a:	30 97       	sbiw	r30, 0x00	; 0
 14c:	59 f0       	breq	.+22     	; 0x164 <SCH_Dispatch_Tasks+0x34>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
 14e:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	81 50       	subi	r24, 0x01	; 1
 154:	8e 83       	std	Y+6, r24	; 0x06

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	89 2b       	or	r24, r25
 15c:	19 f4       	brne	.+6      	; 0x164 <SCH_Dispatch_Tasks+0x34>
         {
            SCH_Delete_Task(Index);
 15e:	81 2f       	mov	r24, r17
 160:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 164:	1f 5f       	subi	r17, 0xFF	; 255
 166:	27 96       	adiw	r28, 0x07	; 7
 168:	15 30       	cpi	r17, 0x05	; 5
 16a:	51 f7       	brne	.-44     	; 0x140 <SCH_Dispatch_Tasks+0x10>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <SCH_Init_T1>:
  You must call this function before using the scheduler.  

-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
 178:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 17a:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	c5 30       	cpi	r28, 0x05	; 5
 186:	d1 f7       	brne	.-12     	; 0x17c <SCH_Init_T1+0x4>

   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR1A = (uint16_t)625;   		     // 10ms = (256/16.000.000) * 625
 188:	81 e7       	ldi	r24, 0x71	; 113
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 190:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
   TCCR1B = (1 << CS12) | (1 << WGM12);  // prescale op 64, top counter = value OCR1A (CTC mode)
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
   TIMSK1 = 1 << OCIE1A;   		     // Timer 1 Output Compare A Match Interrupt Enable
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
}
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <SCH_Start>:
 
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
 1a4:	78 94       	sei
 1a6:	08 95       	ret

000001a8 <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
 1c2:	e6 e0       	ldi	r30, 0x06	; 6
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	29 e2       	ldi	r18, 0x29	; 41
 1c8:	31 e0       	ldi	r19, 0x01	; 1
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	89 2b       	or	r24, r25
 1d0:	91 f0       	breq	.+36     	; 0x1f6 <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	93 81       	ldd	r25, Z+3	; 0x03
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
 1da:	86 81       	ldd	r24, Z+6	; 0x06
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
 1e0:	84 81       	ldd	r24, Z+4	; 0x04
 1e2:	95 81       	ldd	r25, Z+5	; 0x05
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	93 83       	std	Z+3, r25	; 0x03
 1ec:	82 83       	std	Z+2, r24	; 0x02
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	93 83       	std	Z+3, r25	; 0x03
 1f4:	82 83       	std	Z+2, r24	; 0x02
 1f6:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 1f8:	e2 17       	cp	r30, r18
 1fa:	f3 07       	cpc	r31, r19
 1fc:	31 f7       	brne	.-52     	; 0x1ca <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <USART_init>:


// initiliseren van functies

void setup(void){
	DDRC = 0x00;
 218:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 21c:	83 e3       	ldi	r24, 0x33	; 51
 21e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 222:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 226:	88 e1       	ldi	r24, 0x18	; 24
 228:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 22c:	86 e0       	ldi	r24, 0x06	; 6
 22e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 232:	08 95       	ret

00000234 <led_init>:
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	84 b9       	out	0x04, r24	; 4
 238:	8a b9       	out	0x0a, r24	; 10
 23a:	08 95       	ret

0000023c <send>:
 23c:	e0 ec       	ldi	r30, 0xC0	; 192
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	90 81       	ld	r25, Z
 242:	95 ff       	sbrs	r25, 5
 244:	fd cf       	rjmp	.-6      	; 0x240 <send+0x4>
 246:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 24a:	08 95       	ret

0000024c <USART_putstring>:
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	ec 01       	movw	r28, r24
 252:	88 81       	ld	r24, Y
 254:	88 23       	and	r24, r24
 256:	31 f0       	breq	.+12     	; 0x264 <USART_putstring+0x18>
 258:	21 96       	adiw	r28, 0x01	; 1
 25a:	0e 94 1e 01 	call	0x23c	; 0x23c <send>
 25e:	89 91       	ld	r24, Y+
 260:	81 11       	cpse	r24, r1
 262:	fb cf       	rjmp	.-10     	; 0x25a <USART_putstring+0xe>
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <UU_PutNumber>:
 26a:	8f 92       	push	r8
 26c:	9f 92       	push	r9
 26e:	af 92       	push	r10
 270:	bf 92       	push	r11
 272:	ef 92       	push	r14
 274:	ff 92       	push	r15
 276:	0f 93       	push	r16
 278:	1f 93       	push	r17
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
 282:	2a 97       	sbiw	r28, 0x0a	; 10
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	f8 94       	cli
 288:	de bf       	out	0x3e, r29	; 62
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	cd bf       	out	0x3d, r28	; 61
 28e:	9e 01       	movw	r18, r28
 290:	2f 5f       	subi	r18, 0xFF	; 255
 292:	3f 4f       	sbci	r19, 0xFF	; 255
 294:	79 01       	movw	r14, r18
 296:	00 e0       	ldi	r16, 0x00	; 0
 298:	10 e0       	ldi	r17, 0x00	; 0
 29a:	0f 2e       	mov	r0, r31
 29c:	fa e0       	ldi	r31, 0x0A	; 10
 29e:	8f 2e       	mov	r8, r31
 2a0:	91 2c       	mov	r9, r1
 2a2:	a1 2c       	mov	r10, r1
 2a4:	b1 2c       	mov	r11, r1
 2a6:	f0 2d       	mov	r31, r0
 2a8:	0f 5f       	subi	r16, 0xFF	; 255
 2aa:	1f 4f       	sbci	r17, 0xFF	; 255
 2ac:	a5 01       	movw	r20, r10
 2ae:	94 01       	movw	r18, r8
 2b0:	0e 94 c4 04 	call	0x988	; 0x988 <__udivmodsi4>
 2b4:	60 5d       	subi	r22, 0xD0	; 208
 2b6:	f7 01       	movw	r30, r14
 2b8:	61 93       	st	Z+, r22
 2ba:	7f 01       	movw	r14, r30
 2bc:	62 2f       	mov	r22, r18
 2be:	73 2f       	mov	r23, r19
 2c0:	84 2f       	mov	r24, r20
 2c2:	95 2f       	mov	r25, r21
 2c4:	61 15       	cp	r22, r1
 2c6:	71 05       	cpc	r23, r1
 2c8:	81 05       	cpc	r24, r1
 2ca:	91 05       	cpc	r25, r1
 2cc:	69 f7       	brne	.-38     	; 0x2a8 <UU_PutNumber+0x3e>
 2ce:	01 15       	cp	r16, r1
 2d0:	11 05       	cpc	r17, r1
 2d2:	89 f0       	breq	.+34     	; 0x2f6 <UU_PutNumber+0x8c>
 2d4:	ee 24       	eor	r14, r14
 2d6:	e3 94       	inc	r14
 2d8:	f1 2c       	mov	r15, r1
 2da:	ec 0e       	add	r14, r28
 2dc:	fd 1e       	adc	r15, r29
 2de:	e0 0e       	add	r14, r16
 2e0:	f1 1e       	adc	r15, r17
 2e2:	01 50       	subi	r16, 0x01	; 1
 2e4:	11 09       	sbc	r17, r1
 2e6:	f7 01       	movw	r30, r14
 2e8:	82 91       	ld	r24, -Z
 2ea:	7f 01       	movw	r14, r30
 2ec:	0e 94 1e 01 	call	0x23c	; 0x23c <send>
 2f0:	01 15       	cp	r16, r1
 2f2:	11 05       	cpc	r17, r1
 2f4:	b1 f7       	brne	.-20     	; 0x2e2 <UU_PutNumber+0x78>
 2f6:	2a 96       	adiw	r28, 0x0a	; 10
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	f8 94       	cli
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	cd bf       	out	0x3d, r28	; 61
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	1f 91       	pop	r17
 308:	0f 91       	pop	r16
 30a:	ff 90       	pop	r15
 30c:	ef 90       	pop	r14
 30e:	bf 90       	pop	r11
 310:	af 90       	pop	r10
 312:	9f 90       	pop	r9
 314:	8f 90       	pop	r8
 316:	08 95       	ret

00000318 <knipperlicht>:
 318:	8a 30       	cpi	r24, 0x0A	; 10
 31a:	c8 f4       	brcc	.+50     	; 0x34e <knipperlicht+0x36>
 31c:	2a 9a       	sbi	0x05, 2	; 5
 31e:	2f ef       	ldi	r18, 0xFF	; 255
 320:	34 e3       	ldi	r19, 0x34	; 52
 322:	9c e0       	ldi	r25, 0x0C	; 12
 324:	21 50       	subi	r18, 0x01	; 1
 326:	30 40       	sbci	r19, 0x00	; 0
 328:	90 40       	sbci	r25, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <knipperlicht+0xc>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <knipperlicht+0x16>
 32e:	00 00       	nop
 330:	95 b1       	in	r25, 0x05	; 5
 332:	93 70       	andi	r25, 0x03	; 3
 334:	95 b9       	out	0x05, r25	; 5
 336:	2f ef       	ldi	r18, 0xFF	; 255
 338:	34 e3       	ldi	r19, 0x34	; 52
 33a:	9c e0       	ldi	r25, 0x0C	; 12
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	30 40       	sbci	r19, 0x00	; 0
 340:	90 40       	sbci	r25, 0x00	; 0
 342:	e1 f7       	brne	.-8      	; 0x33c <knipperlicht+0x24>
 344:	00 c0       	rjmp	.+0      	; 0x346 <knipperlicht+0x2e>
 346:	00 00       	nop
 348:	8f 5f       	subi	r24, 0xFF	; 255
 34a:	8a 30       	cpi	r24, 0x0A	; 10
 34c:	39 f7       	brne	.-50     	; 0x31c <knipperlicht+0x4>
 34e:	08 95       	ret

00000350 <naar_boven>:
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	85 b9       	out	0x05, r24	; 5
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	0e 94 8c 01 	call	0x318	; 0x318 <knipperlicht>
 35a:	08 95       	ret

0000035c <naar_beneden>:
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	85 b9       	out	0x05, r24	; 5
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 8c 01 	call	0x318	; 0x318 <knipperlicht>
 366:	08 95       	ret

00000368 <adc_init>:
}

void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
 368:	80 e4       	ldi	r24, 0x40	; 64
 36a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 36e:	87 e8       	ldi	r24, 0x87	; 135
 370:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 374:	08 95       	ret

00000376 <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
 376:	ec e7       	ldi	r30, 0x7C	; 124
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	90 81       	ld	r25, Z
 37c:	98 7f       	andi	r25, 0xF8	; 248
 37e:	87 70       	andi	r24, 0x07	; 7
 380:	89 2b       	or	r24, r25
 382:	80 83       	st	Z, r24
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
 384:	ea e7       	ldi	r30, 0x7A	; 122
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	80 81       	ld	r24, Z
 38a:	80 64       	ori	r24, 0x40	; 64
 38c:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
 38e:	80 81       	ld	r24, Z
 390:	86 fd       	sbrc	r24, 6
 392:	fd cf       	rjmp	.-6      	; 0x38e <adc_read+0x18>
	
	return (ADC);
 394:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 398:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 39c:	08 95       	ret

0000039e <licht_waarde>:

int licht_waarde(){
	int result;
	adc_result0 = adc_read(0);      // read adc value at PA0
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	0e 94 bb 01 	call	0x376	; 0x376 <adc_read>
 3a4:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <adc_result0+0x1>
 3a8:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <adc_result0>
	if (adc_result0 < 150)
 3ac:	86 39       	cpi	r24, 0x96	; 150
 3ae:	91 05       	cpc	r25, r1
 3b0:	88 f0       	brcs	.+34     	; 0x3d4 <licht_waarde+0x36>
	{
		result = 0;
		return result;
	}
	if (adc_result0 >150 && adc_result0 <300)
 3b2:	9c 01       	movw	r18, r24
 3b4:	27 59       	subi	r18, 0x97	; 151
 3b6:	31 09       	sbc	r19, r1
 3b8:	25 39       	cpi	r18, 0x95	; 149
 3ba:	31 05       	cpc	r19, r1
 3bc:	70 f0       	brcs	.+28     	; 0x3da <licht_waarde+0x3c>
	{
		result = 1;
		return result;
	}
	if (adc_result0 >300 && adc_result0 <750)
 3be:	26 59       	subi	r18, 0x96	; 150
 3c0:	31 09       	sbc	r19, r1
 3c2:	21 3c       	cpi	r18, 0xC1	; 193
 3c4:	31 40       	sbci	r19, 0x01	; 1
 3c6:	60 f0       	brcs	.+24     	; 0x3e0 <licht_waarde+0x42>
	{
		result = 2;
		return result;
	}
	if (adc_result0 > 750)
 3c8:	8f 3e       	cpi	r24, 0xEF	; 239
 3ca:	92 40       	sbci	r25, 0x02	; 2
 3cc:	60 f4       	brcc	.+24     	; 0x3e6 <licht_waarde+0x48>
	{
		result = 3;
		return result;
	}
	return result = 100;
 3ce:	84 e6       	ldi	r24, 0x64	; 100
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	08 95       	ret
	int result;
	adc_result0 = adc_read(0);      // read adc value at PA0
	if (adc_result0 < 150)
	{
		result = 0;
		return result;
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	08 95       	ret
	}
	if (adc_result0 >150 && adc_result0 <300)
	{
		result = 1;
		return result;
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	08 95       	ret
	}
	if (adc_result0 >300 && adc_result0 <750)
	{
		result = 2;
		return result;
 3e0:	82 e0       	ldi	r24, 0x02	; 2
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	08 95       	ret
	}
	if (adc_result0 > 750)
	{
		result = 3;
		return result;
 3e6:	83 e0       	ldi	r24, 0x03	; 3
 3e8:	90 e0       	ldi	r25, 0x00	; 0
	}
	return result = 100;
}
 3ea:	08 95       	ret

000003ec <temp>:

int temp(){
	adc_result1 = adc_read(1);
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	0e 94 bb 01 	call	0x376	; 0x376 <adc_read>
 3f2:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <adc_result1+0x1>
 3f6:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <adc_result1>
	float voltage = adc_result1 * 5.0;
 3fa:	bc 01       	movw	r22, r24
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 c9 03 	call	0x792	; 0x792 <__floatunsisf>
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	40 ea       	ldi	r20, 0xA0	; 160
 40a:	50 e4       	ldi	r21, 0x40	; 64
 40c:	0e 94 57 04 	call	0x8ae	; 0x8ae <__mulsf3>
	voltage /= 1024.0;
	float temperatureC = (voltage - 0.5) * 10;
	int temp_int = temperatureC * 100;
	return temp_int;
 410:	20 e0       	ldi	r18, 0x00	; 0
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	40 e8       	ldi	r20, 0x80	; 128
 416:	5a e3       	ldi	r21, 0x3A	; 58
 418:	0e 94 57 04 	call	0x8ae	; 0x8ae <__mulsf3>
 41c:	20 e0       	ldi	r18, 0x00	; 0
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	40 e0       	ldi	r20, 0x00	; 0
 422:	5f e3       	ldi	r21, 0x3F	; 63
 424:	0e 94 26 03 	call	0x64c	; 0x64c <__subsf3>
 428:	20 e0       	ldi	r18, 0x00	; 0
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	40 e2       	ldi	r20, 0x20	; 32
 42e:	51 e4       	ldi	r21, 0x41	; 65
 430:	0e 94 57 04 	call	0x8ae	; 0x8ae <__mulsf3>
 434:	20 e0       	ldi	r18, 0x00	; 0
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	48 ec       	ldi	r20, 0xC8	; 200
 43a:	52 e4       	ldi	r21, 0x42	; 66
 43c:	0e 94 57 04 	call	0x8ae	; 0x8ae <__mulsf3>
 440:	0e 94 93 03 	call	0x726	; 0x726 <__fixsfsi>
}
 444:	cb 01       	movw	r24, r22
 446:	08 95       	ret

00000448 <send_data>:


void send_data(void){
	USART_putstring("x");
 448:	82 e0       	ldi	r24, 0x02	; 2
 44a:	91 e0       	ldi	r25, 0x01	; 1
 44c:	0e 94 26 01 	call	0x24c	; 0x24c <USART_putstring>
	UU_PutNumber(licht_waarde());
 450:	0e 94 cf 01 	call	0x39e	; 0x39e <licht_waarde>
 454:	bc 01       	movw	r22, r24
 456:	99 0f       	add	r25, r25
 458:	88 0b       	sbc	r24, r24
 45a:	99 0b       	sbc	r25, r25
 45c:	0e 94 35 01 	call	0x26a	; 0x26a <UU_PutNumber>
	UU_PutNumber(temp());
 460:	0e 94 f6 01 	call	0x3ec	; 0x3ec <temp>
 464:	bc 01       	movw	r22, r24
 466:	99 0f       	add	r25, r25
 468:	88 0b       	sbc	r24, r24
 46a:	99 0b       	sbc	r25, r25
 46c:	0e 94 35 01 	call	0x26a	; 0x26a <UU_PutNumber>
 470:	08 95       	ret

00000472 <receive>:
}

void receive(void){
 472:	4f 92       	push	r4
 474:	5f 92       	push	r5
 476:	6f 92       	push	r6
 478:	7f 92       	push	r7
 47a:	8f 92       	push	r8
 47c:	9f 92       	push	r9
 47e:	af 92       	push	r10
 480:	bf 92       	push	r11
 482:	cf 92       	push	r12
 484:	df 92       	push	r13
 486:	ef 92       	push	r14
 488:	ff 92       	push	r15
 48a:	1f 93       	push	r17
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
	int licht_test = licht_waarde();
 490:	0e 94 cf 01 	call	0x39e	; 0x39e <licht_waarde>
 494:	2c 01       	movw	r4, r24
	while(UCSR0A & (1<<RXC0)){
 496:	c0 ec       	ldi	r28, 0xC0	; 192
 498:	d0 e0       	ldi	r29, 0x00	; 0
		uint8_t data = UDR0;
 49a:	0f 2e       	mov	r0, r31
 49c:	f6 ec       	ldi	r31, 0xC6	; 198
 49e:	ef 2e       	mov	r14, r31
 4a0:	f1 2c       	mov	r15, r1
 4a2:	f0 2d       	mov	r31, r0
		if (data == 0x79 ){
			licht_voorkeur = 2;
		}
		
		if (data == 0x7A ){
			licht_voorkeur = 3;
 4a4:	0f 2e       	mov	r0, r31
 4a6:	f3 e0       	ldi	r31, 0x03	; 3
 4a8:	8f 2e       	mov	r8, r31
 4aa:	91 2c       	mov	r9, r1
 4ac:	f0 2d       	mov	r31, r0
		}
		if (data == 0x78){
			licht_voorkeur = 1;
		}
		if (data == 0x79 ){
			licht_voorkeur = 2;
 4ae:	68 94       	set
 4b0:	66 24       	eor	r6, r6
 4b2:	61 f8       	bld	r6, 1
 4b4:	71 2c       	mov	r7, r1
		//licht voorkeur instellen
		if (data == 0x77 ){
			licht_voorkeur = 0;
		}
		if (data == 0x78){
			licht_voorkeur = 1;
 4b6:	aa 24       	eor	r10, r10
 4b8:	a3 94       	inc	r10
 4ba:	b1 2c       	mov	r11, r1
			bool = 1;
			naar_beneden();
			
		}
		}
		if ((licht_waarde == 3) && (bool == 0))
 4bc:	0f 2e       	mov	r0, r31
 4be:	ff ec       	ldi	r31, 0xCF	; 207
 4c0:	cf 2e       	mov	r12, r31
 4c2:	f1 e0       	ldi	r31, 0x01	; 1
 4c4:	df 2e       	mov	r13, r31
 4c6:	f0 2d       	mov	r31, r0
	UU_PutNumber(temp());
}

void receive(void){
	int licht_test = licht_waarde();
	while(UCSR0A & (1<<RXC0)){
 4c8:	85 c0       	rjmp	.+266    	; 0x5d4 <receive+0x162>
		uint8_t data = UDR0;
 4ca:	f7 01       	movw	r30, r14
 4cc:	10 81       	ld	r17, Z
		if((data == 0b01101111)&&(bool == 1))
 4ce:	1f 36       	cpi	r17, 0x6F	; 111
 4d0:	69 f4       	brne	.+26     	; 0x4ec <receive+0x7a>
 4d2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 4d6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 4da:	01 97       	sbiw	r24, 0x01	; 1
 4dc:	d1 f4       	brne	.+52     	; 0x512 <receive+0xa0>
		{
			bool = 0;
 4de:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 4e2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
			naar_boven();
 4e6:	0e 94 a8 01 	call	0x350	; 0x350 <naar_boven>
 4ea:	13 c0       	rjmp	.+38     	; 0x512 <receive+0xa0>
			
		}
		if((data == 0x64)&&(bool == 0))
 4ec:	14 36       	cpi	r17, 0x64	; 100
 4ee:	69 f4       	brne	.+26     	; 0x50a <receive+0x98>
 4f0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 4f4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 4f8:	89 2b       	or	r24, r25
 4fa:	91 f4       	brne	.+36     	; 0x520 <receive+0xae>
		{
			bool = 1;
 4fc:	b0 92 05 01 	sts	0x0105, r11	; 0x800105 <__data_end+0x1>
 500:	a0 92 04 01 	sts	0x0104, r10	; 0x800104 <__data_end>
			naar_beneden();
 504:	0e 94 ae 01 	call	0x35c	; 0x35c <naar_beneden>
 508:	0b c0       	rjmp	.+22     	; 0x520 <receive+0xae>
			
		}
		if(data == 0x73){
 50a:	13 37       	cpi	r17, 0x73	; 115
 50c:	11 f4       	brne	.+4      	; 0x512 <receive+0xa0>
			PORTB = 0b00000000;
 50e:	15 b8       	out	0x05, r1	; 5
 510:	0e c0       	rjmp	.+28     	; 0x52e <receive+0xbc>
		}
		//licht voorkeur instellen
		if (data == 0x77 ){
 512:	17 37       	cpi	r17, 0x77	; 119
 514:	29 f4       	brne	.+10     	; 0x520 <receive+0xae>
			licht_voorkeur = 0;
 516:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 51a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 51e:	0e c0       	rjmp	.+28     	; 0x53c <receive+0xca>
		}
		if (data == 0x78){
 520:	18 37       	cpi	r17, 0x78	; 120
 522:	29 f4       	brne	.+10     	; 0x52e <receive+0xbc>
			licht_voorkeur = 1;
 524:	b0 92 01 01 	sts	0x0101, r11	; 0x800101 <__data_start+0x1>
 528:	a0 92 00 01 	sts	0x0100, r10	; 0x800100 <__data_start>
 52c:	0d c0       	rjmp	.+26     	; 0x548 <receive+0xd6>
		}
		if (data == 0x79 ){
 52e:	19 37       	cpi	r17, 0x79	; 121
 530:	29 f4       	brne	.+10     	; 0x53c <receive+0xca>
			licht_voorkeur = 2;
 532:	70 92 01 01 	sts	0x0101, r7	; 0x800101 <__data_start+0x1>
 536:	60 92 00 01 	sts	0x0100, r6	; 0x800100 <__data_start>
 53a:	06 c0       	rjmp	.+12     	; 0x548 <receive+0xd6>
		}
		
		if (data == 0x7A ){
 53c:	1a 37       	cpi	r17, 0x7A	; 122
 53e:	21 f4       	brne	.+8      	; 0x548 <receive+0xd6>
			licht_voorkeur = 3;
 540:	90 92 01 01 	sts	0x0101, r9	; 0x800101 <__data_start+0x1>
 544:	80 92 00 01 	sts	0x0100, r8	; 0x800100 <__data_start>
		}
		//acties uit te voeren per licht voorkeur
		if ((licht_voorkeur == licht_test) && (bool == 0))
 548:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 54c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 550:	48 16       	cp	r4, r24
 552:	59 06       	cpc	r5, r25
 554:	f9 f4       	brne	.+62     	; 0x594 <receive+0x122>
 556:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 55a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 55e:	89 2b       	or	r24, r25
 560:	49 f5       	brne	.+82     	; 0x5b4 <receive+0x142>
		{
			bool = 1;
 562:	b0 92 05 01 	sts	0x0105, r11	; 0x800105 <__data_end+0x1>
 566:	a0 92 04 01 	sts	0x0104, r10	; 0x800104 <__data_end>
			naar_beneden();
 56a:	0e 94 ae 01 	call	0x35c	; 0x35c <naar_beneden>
			
		}
		if (licht_voorkeur == licht_test)
 56e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 572:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 576:	48 16       	cp	r4, r24
 578:	59 06       	cpc	r5, r25
 57a:	61 f4       	brne	.+24     	; 0x594 <receive+0x122>
		{ if ( bool == 0)
 57c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 580:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 584:	89 2b       	or	r24, r25
 586:	b1 f4       	brne	.+44     	; 0x5b4 <receive+0x142>
		{
			bool = 1;
 588:	b0 92 05 01 	sts	0x0105, r11	; 0x800105 <__data_end+0x1>
 58c:	a0 92 04 01 	sts	0x0104, r10	; 0x800104 <__data_end>
			naar_beneden();
 590:	0e 94 ae 01 	call	0x35c	; 0x35c <naar_beneden>
			
		}
		}
		if ((licht_waarde == 3) && (bool == 0))
 594:	f3 e0       	ldi	r31, 0x03	; 3
 596:	cf 16       	cp	r12, r31
 598:	d1 04       	cpc	r13, r1
 59a:	61 f4       	brne	.+24     	; 0x5b4 <receive+0x142>
 59c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 5a0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 5a4:	89 2b       	or	r24, r25
 5a6:	31 f4       	brne	.+12     	; 0x5b4 <receive+0x142>
		{
			bool = 1;
 5a8:	b0 92 05 01 	sts	0x0105, r11	; 0x800105 <__data_end+0x1>
 5ac:	a0 92 04 01 	sts	0x0104, r10	; 0x800104 <__data_end>
			naar_beneden();
 5b0:	0e 94 ae 01 	call	0x35c	; 0x35c <naar_beneden>
			
		}
		if(licht_waarde() == 1)
 5b4:	0e 94 cf 01 	call	0x39e	; 0x39e <licht_waarde>
 5b8:	01 97       	sbiw	r24, 0x01	; 1
 5ba:	61 f4       	brne	.+24     	; 0x5d4 <receive+0x162>
		{if(bool==1){
 5bc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 5c0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 5c4:	01 97       	sbiw	r24, 0x01	; 1
 5c6:	31 f4       	brne	.+12     	; 0x5d4 <receive+0x162>
			bool = 0;
 5c8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 5cc:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
			naar_boven();
 5d0:	0e 94 a8 01 	call	0x350	; 0x350 <naar_boven>
	UU_PutNumber(temp());
}

void receive(void){
	int licht_test = licht_waarde();
	while(UCSR0A & (1<<RXC0)){
 5d4:	88 81       	ld	r24, Y
 5d6:	88 23       	and	r24, r24
 5d8:	0c f4       	brge	.+2      	; 0x5dc <receive+0x16a>
 5da:	77 cf       	rjmp	.-274    	; 0x4ca <receive+0x58>
			naar_boven();
			
		}
	}
	}
}
 5dc:	df 91       	pop	r29
 5de:	cf 91       	pop	r28
 5e0:	1f 91       	pop	r17
 5e2:	ff 90       	pop	r15
 5e4:	ef 90       	pop	r14
 5e6:	df 90       	pop	r13
 5e8:	cf 90       	pop	r12
 5ea:	bf 90       	pop	r11
 5ec:	af 90       	pop	r10
 5ee:	9f 90       	pop	r9
 5f0:	8f 90       	pop	r8
 5f2:	7f 90       	pop	r7
 5f4:	6f 90       	pop	r6
 5f6:	5f 90       	pop	r5
 5f8:	4f 90       	pop	r4
 5fa:	08 95       	ret

000005fc <main>:


// initiliseren van functies

void setup(void){
	DDRC = 0x00;
 5fc:	17 b8       	out	0x07, r1	; 7
}

int main()
{
	setup();
	led_init();
 5fe:	0e 94 1a 01 	call	0x234	; 0x234 <led_init>
	adc_init();
 602:	0e 94 b4 01 	call	0x368	; 0x368 <adc_init>
	USART_init();
 606:	0e 94 0c 01 	call	0x218	; 0x218 <USART_init>
	
	SCH_Init_T1();
 60a:	0e 94 bc 00 	call	0x178	; 0x178 <SCH_Init_T1>
	SCH_Add_Task(temp,0,400);
 60e:	40 e9       	ldi	r20, 0x90	; 144
 610:	51 e0       	ldi	r21, 0x01	; 1
 612:	60 e0       	ldi	r22, 0x00	; 0
 614:	70 e0       	ldi	r23, 0x00	; 0
 616:	86 ef       	ldi	r24, 0xF6	; 246
 618:	91 e0       	ldi	r25, 0x01	; 1
 61a:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(licht_waarde,0,300);
 61e:	4c e2       	ldi	r20, 0x2C	; 44
 620:	51 e0       	ldi	r21, 0x01	; 1
 622:	60 e0       	ldi	r22, 0x00	; 0
 624:	70 e0       	ldi	r23, 0x00	; 0
 626:	8f ec       	ldi	r24, 0xCF	; 207
 628:	91 e0       	ldi	r25, 0x01	; 1
 62a:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(send_data,0,600);
 62e:	48 e5       	ldi	r20, 0x58	; 88
 630:	52 e0       	ldi	r21, 0x02	; 2
 632:	60 e0       	ldi	r22, 0x00	; 0
 634:	70 e0       	ldi	r23, 0x00	; 0
 636:	84 e2       	ldi	r24, 0x24	; 36
 638:	92 e0       	ldi	r25, 0x02	; 2
 63a:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	
	
	SCH_Start();
 63e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SCH_Start>
	while(1){
		SCH_Dispatch_Tasks();
 642:	0e 94 98 00 	call	0x130	; 0x130 <SCH_Dispatch_Tasks>
		receive();
 646:	0e 94 39 02 	call	0x472	; 0x472 <receive>
 64a:	fb cf       	rjmp	.-10     	; 0x642 <main+0x46>

0000064c <__subsf3>:
 64c:	50 58       	subi	r21, 0x80	; 128

0000064e <__addsf3>:
 64e:	bb 27       	eor	r27, r27
 650:	aa 27       	eor	r26, r26
 652:	0e 94 3e 03 	call	0x67c	; 0x67c <__addsf3x>
 656:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_round>
 65a:	0e 94 0f 04 	call	0x81e	; 0x81e <__fp_pscA>
 65e:	38 f0       	brcs	.+14     	; 0x66e <__addsf3+0x20>
 660:	0e 94 16 04 	call	0x82c	; 0x82c <__fp_pscB>
 664:	20 f0       	brcs	.+8      	; 0x66e <__addsf3+0x20>
 666:	39 f4       	brne	.+14     	; 0x676 <__addsf3+0x28>
 668:	9f 3f       	cpi	r25, 0xFF	; 255
 66a:	19 f4       	brne	.+6      	; 0x672 <__addsf3+0x24>
 66c:	26 f4       	brtc	.+8      	; 0x676 <__addsf3+0x28>
 66e:	0c 94 0c 04 	jmp	0x818	; 0x818 <__fp_nan>
 672:	0e f4       	brtc	.+2      	; 0x676 <__addsf3+0x28>
 674:	e0 95       	com	r30
 676:	e7 fb       	bst	r30, 7
 678:	0c 94 06 04 	jmp	0x80c	; 0x80c <__fp_inf>

0000067c <__addsf3x>:
 67c:	e9 2f       	mov	r30, r25
 67e:	0e 94 2e 04 	call	0x85c	; 0x85c <__fp_split3>
 682:	58 f3       	brcs	.-42     	; 0x65a <__addsf3+0xc>
 684:	ba 17       	cp	r27, r26
 686:	62 07       	cpc	r22, r18
 688:	73 07       	cpc	r23, r19
 68a:	84 07       	cpc	r24, r20
 68c:	95 07       	cpc	r25, r21
 68e:	20 f0       	brcs	.+8      	; 0x698 <__addsf3x+0x1c>
 690:	79 f4       	brne	.+30     	; 0x6b0 <__addsf3x+0x34>
 692:	a6 f5       	brtc	.+104    	; 0x6fc <__addsf3x+0x80>
 694:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__fp_zero>
 698:	0e f4       	brtc	.+2      	; 0x69c <__addsf3x+0x20>
 69a:	e0 95       	com	r30
 69c:	0b 2e       	mov	r0, r27
 69e:	ba 2f       	mov	r27, r26
 6a0:	a0 2d       	mov	r26, r0
 6a2:	0b 01       	movw	r0, r22
 6a4:	b9 01       	movw	r22, r18
 6a6:	90 01       	movw	r18, r0
 6a8:	0c 01       	movw	r0, r24
 6aa:	ca 01       	movw	r24, r20
 6ac:	a0 01       	movw	r20, r0
 6ae:	11 24       	eor	r1, r1
 6b0:	ff 27       	eor	r31, r31
 6b2:	59 1b       	sub	r21, r25
 6b4:	99 f0       	breq	.+38     	; 0x6dc <__addsf3x+0x60>
 6b6:	59 3f       	cpi	r21, 0xF9	; 249
 6b8:	50 f4       	brcc	.+20     	; 0x6ce <__addsf3x+0x52>
 6ba:	50 3e       	cpi	r21, 0xE0	; 224
 6bc:	68 f1       	brcs	.+90     	; 0x718 <__addsf3x+0x9c>
 6be:	1a 16       	cp	r1, r26
 6c0:	f0 40       	sbci	r31, 0x00	; 0
 6c2:	a2 2f       	mov	r26, r18
 6c4:	23 2f       	mov	r18, r19
 6c6:	34 2f       	mov	r19, r20
 6c8:	44 27       	eor	r20, r20
 6ca:	58 5f       	subi	r21, 0xF8	; 248
 6cc:	f3 cf       	rjmp	.-26     	; 0x6b4 <__addsf3x+0x38>
 6ce:	46 95       	lsr	r20
 6d0:	37 95       	ror	r19
 6d2:	27 95       	ror	r18
 6d4:	a7 95       	ror	r26
 6d6:	f0 40       	sbci	r31, 0x00	; 0
 6d8:	53 95       	inc	r21
 6da:	c9 f7       	brne	.-14     	; 0x6ce <__addsf3x+0x52>
 6dc:	7e f4       	brtc	.+30     	; 0x6fc <__addsf3x+0x80>
 6de:	1f 16       	cp	r1, r31
 6e0:	ba 0b       	sbc	r27, r26
 6e2:	62 0b       	sbc	r22, r18
 6e4:	73 0b       	sbc	r23, r19
 6e6:	84 0b       	sbc	r24, r20
 6e8:	ba f0       	brmi	.+46     	; 0x718 <__addsf3x+0x9c>
 6ea:	91 50       	subi	r25, 0x01	; 1
 6ec:	a1 f0       	breq	.+40     	; 0x716 <__addsf3x+0x9a>
 6ee:	ff 0f       	add	r31, r31
 6f0:	bb 1f       	adc	r27, r27
 6f2:	66 1f       	adc	r22, r22
 6f4:	77 1f       	adc	r23, r23
 6f6:	88 1f       	adc	r24, r24
 6f8:	c2 f7       	brpl	.-16     	; 0x6ea <__addsf3x+0x6e>
 6fa:	0e c0       	rjmp	.+28     	; 0x718 <__addsf3x+0x9c>
 6fc:	ba 0f       	add	r27, r26
 6fe:	62 1f       	adc	r22, r18
 700:	73 1f       	adc	r23, r19
 702:	84 1f       	adc	r24, r20
 704:	48 f4       	brcc	.+18     	; 0x718 <__addsf3x+0x9c>
 706:	87 95       	ror	r24
 708:	77 95       	ror	r23
 70a:	67 95       	ror	r22
 70c:	b7 95       	ror	r27
 70e:	f7 95       	ror	r31
 710:	9e 3f       	cpi	r25, 0xFE	; 254
 712:	08 f0       	brcs	.+2      	; 0x716 <__addsf3x+0x9a>
 714:	b0 cf       	rjmp	.-160    	; 0x676 <__addsf3+0x28>
 716:	93 95       	inc	r25
 718:	88 0f       	add	r24, r24
 71a:	08 f0       	brcs	.+2      	; 0x71e <__addsf3x+0xa2>
 71c:	99 27       	eor	r25, r25
 71e:	ee 0f       	add	r30, r30
 720:	97 95       	ror	r25
 722:	87 95       	ror	r24
 724:	08 95       	ret

00000726 <__fixsfsi>:
 726:	0e 94 9a 03 	call	0x734	; 0x734 <__fixunssfsi>
 72a:	68 94       	set
 72c:	b1 11       	cpse	r27, r1
 72e:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_szero>
 732:	08 95       	ret

00000734 <__fixunssfsi>:
 734:	0e 94 36 04 	call	0x86c	; 0x86c <__fp_splitA>
 738:	88 f0       	brcs	.+34     	; 0x75c <__fixunssfsi+0x28>
 73a:	9f 57       	subi	r25, 0x7F	; 127
 73c:	98 f0       	brcs	.+38     	; 0x764 <__fixunssfsi+0x30>
 73e:	b9 2f       	mov	r27, r25
 740:	99 27       	eor	r25, r25
 742:	b7 51       	subi	r27, 0x17	; 23
 744:	b0 f0       	brcs	.+44     	; 0x772 <__fixunssfsi+0x3e>
 746:	e1 f0       	breq	.+56     	; 0x780 <__fixunssfsi+0x4c>
 748:	66 0f       	add	r22, r22
 74a:	77 1f       	adc	r23, r23
 74c:	88 1f       	adc	r24, r24
 74e:	99 1f       	adc	r25, r25
 750:	1a f0       	brmi	.+6      	; 0x758 <__fixunssfsi+0x24>
 752:	ba 95       	dec	r27
 754:	c9 f7       	brne	.-14     	; 0x748 <__fixunssfsi+0x14>
 756:	14 c0       	rjmp	.+40     	; 0x780 <__fixunssfsi+0x4c>
 758:	b1 30       	cpi	r27, 0x01	; 1
 75a:	91 f0       	breq	.+36     	; 0x780 <__fixunssfsi+0x4c>
 75c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__fp_zero>
 760:	b1 e0       	ldi	r27, 0x01	; 1
 762:	08 95       	ret
 764:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__fp_zero>
 768:	67 2f       	mov	r22, r23
 76a:	78 2f       	mov	r23, r24
 76c:	88 27       	eor	r24, r24
 76e:	b8 5f       	subi	r27, 0xF8	; 248
 770:	39 f0       	breq	.+14     	; 0x780 <__fixunssfsi+0x4c>
 772:	b9 3f       	cpi	r27, 0xF9	; 249
 774:	cc f3       	brlt	.-14     	; 0x768 <__fixunssfsi+0x34>
 776:	86 95       	lsr	r24
 778:	77 95       	ror	r23
 77a:	67 95       	ror	r22
 77c:	b3 95       	inc	r27
 77e:	d9 f7       	brne	.-10     	; 0x776 <__fixunssfsi+0x42>
 780:	3e f4       	brtc	.+14     	; 0x790 <__fixunssfsi+0x5c>
 782:	90 95       	com	r25
 784:	80 95       	com	r24
 786:	70 95       	com	r23
 788:	61 95       	neg	r22
 78a:	7f 4f       	sbci	r23, 0xFF	; 255
 78c:	8f 4f       	sbci	r24, 0xFF	; 255
 78e:	9f 4f       	sbci	r25, 0xFF	; 255
 790:	08 95       	ret

00000792 <__floatunsisf>:
 792:	e8 94       	clt
 794:	09 c0       	rjmp	.+18     	; 0x7a8 <__floatsisf+0x12>

00000796 <__floatsisf>:
 796:	97 fb       	bst	r25, 7
 798:	3e f4       	brtc	.+14     	; 0x7a8 <__floatsisf+0x12>
 79a:	90 95       	com	r25
 79c:	80 95       	com	r24
 79e:	70 95       	com	r23
 7a0:	61 95       	neg	r22
 7a2:	7f 4f       	sbci	r23, 0xFF	; 255
 7a4:	8f 4f       	sbci	r24, 0xFF	; 255
 7a6:	9f 4f       	sbci	r25, 0xFF	; 255
 7a8:	99 23       	and	r25, r25
 7aa:	a9 f0       	breq	.+42     	; 0x7d6 <__floatsisf+0x40>
 7ac:	f9 2f       	mov	r31, r25
 7ae:	96 e9       	ldi	r25, 0x96	; 150
 7b0:	bb 27       	eor	r27, r27
 7b2:	93 95       	inc	r25
 7b4:	f6 95       	lsr	r31
 7b6:	87 95       	ror	r24
 7b8:	77 95       	ror	r23
 7ba:	67 95       	ror	r22
 7bc:	b7 95       	ror	r27
 7be:	f1 11       	cpse	r31, r1
 7c0:	f8 cf       	rjmp	.-16     	; 0x7b2 <__floatsisf+0x1c>
 7c2:	fa f4       	brpl	.+62     	; 0x802 <__floatsisf+0x6c>
 7c4:	bb 0f       	add	r27, r27
 7c6:	11 f4       	brne	.+4      	; 0x7cc <__floatsisf+0x36>
 7c8:	60 ff       	sbrs	r22, 0
 7ca:	1b c0       	rjmp	.+54     	; 0x802 <__floatsisf+0x6c>
 7cc:	6f 5f       	subi	r22, 0xFF	; 255
 7ce:	7f 4f       	sbci	r23, 0xFF	; 255
 7d0:	8f 4f       	sbci	r24, 0xFF	; 255
 7d2:	9f 4f       	sbci	r25, 0xFF	; 255
 7d4:	16 c0       	rjmp	.+44     	; 0x802 <__floatsisf+0x6c>
 7d6:	88 23       	and	r24, r24
 7d8:	11 f0       	breq	.+4      	; 0x7de <__floatsisf+0x48>
 7da:	96 e9       	ldi	r25, 0x96	; 150
 7dc:	11 c0       	rjmp	.+34     	; 0x800 <__floatsisf+0x6a>
 7de:	77 23       	and	r23, r23
 7e0:	21 f0       	breq	.+8      	; 0x7ea <__floatsisf+0x54>
 7e2:	9e e8       	ldi	r25, 0x8E	; 142
 7e4:	87 2f       	mov	r24, r23
 7e6:	76 2f       	mov	r23, r22
 7e8:	05 c0       	rjmp	.+10     	; 0x7f4 <__floatsisf+0x5e>
 7ea:	66 23       	and	r22, r22
 7ec:	71 f0       	breq	.+28     	; 0x80a <__floatsisf+0x74>
 7ee:	96 e8       	ldi	r25, 0x86	; 134
 7f0:	86 2f       	mov	r24, r22
 7f2:	70 e0       	ldi	r23, 0x00	; 0
 7f4:	60 e0       	ldi	r22, 0x00	; 0
 7f6:	2a f0       	brmi	.+10     	; 0x802 <__floatsisf+0x6c>
 7f8:	9a 95       	dec	r25
 7fa:	66 0f       	add	r22, r22
 7fc:	77 1f       	adc	r23, r23
 7fe:	88 1f       	adc	r24, r24
 800:	da f7       	brpl	.-10     	; 0x7f8 <__floatsisf+0x62>
 802:	88 0f       	add	r24, r24
 804:	96 95       	lsr	r25
 806:	87 95       	ror	r24
 808:	97 f9       	bld	r25, 7
 80a:	08 95       	ret

0000080c <__fp_inf>:
 80c:	97 f9       	bld	r25, 7
 80e:	9f 67       	ori	r25, 0x7F	; 127
 810:	80 e8       	ldi	r24, 0x80	; 128
 812:	70 e0       	ldi	r23, 0x00	; 0
 814:	60 e0       	ldi	r22, 0x00	; 0
 816:	08 95       	ret

00000818 <__fp_nan>:
 818:	9f ef       	ldi	r25, 0xFF	; 255
 81a:	80 ec       	ldi	r24, 0xC0	; 192
 81c:	08 95       	ret

0000081e <__fp_pscA>:
 81e:	00 24       	eor	r0, r0
 820:	0a 94       	dec	r0
 822:	16 16       	cp	r1, r22
 824:	17 06       	cpc	r1, r23
 826:	18 06       	cpc	r1, r24
 828:	09 06       	cpc	r0, r25
 82a:	08 95       	ret

0000082c <__fp_pscB>:
 82c:	00 24       	eor	r0, r0
 82e:	0a 94       	dec	r0
 830:	12 16       	cp	r1, r18
 832:	13 06       	cpc	r1, r19
 834:	14 06       	cpc	r1, r20
 836:	05 06       	cpc	r0, r21
 838:	08 95       	ret

0000083a <__fp_round>:
 83a:	09 2e       	mov	r0, r25
 83c:	03 94       	inc	r0
 83e:	00 0c       	add	r0, r0
 840:	11 f4       	brne	.+4      	; 0x846 <__fp_round+0xc>
 842:	88 23       	and	r24, r24
 844:	52 f0       	brmi	.+20     	; 0x85a <__fp_round+0x20>
 846:	bb 0f       	add	r27, r27
 848:	40 f4       	brcc	.+16     	; 0x85a <__fp_round+0x20>
 84a:	bf 2b       	or	r27, r31
 84c:	11 f4       	brne	.+4      	; 0x852 <__fp_round+0x18>
 84e:	60 ff       	sbrs	r22, 0
 850:	04 c0       	rjmp	.+8      	; 0x85a <__fp_round+0x20>
 852:	6f 5f       	subi	r22, 0xFF	; 255
 854:	7f 4f       	sbci	r23, 0xFF	; 255
 856:	8f 4f       	sbci	r24, 0xFF	; 255
 858:	9f 4f       	sbci	r25, 0xFF	; 255
 85a:	08 95       	ret

0000085c <__fp_split3>:
 85c:	57 fd       	sbrc	r21, 7
 85e:	90 58       	subi	r25, 0x80	; 128
 860:	44 0f       	add	r20, r20
 862:	55 1f       	adc	r21, r21
 864:	59 f0       	breq	.+22     	; 0x87c <__fp_splitA+0x10>
 866:	5f 3f       	cpi	r21, 0xFF	; 255
 868:	71 f0       	breq	.+28     	; 0x886 <__fp_splitA+0x1a>
 86a:	47 95       	ror	r20

0000086c <__fp_splitA>:
 86c:	88 0f       	add	r24, r24
 86e:	97 fb       	bst	r25, 7
 870:	99 1f       	adc	r25, r25
 872:	61 f0       	breq	.+24     	; 0x88c <__fp_splitA+0x20>
 874:	9f 3f       	cpi	r25, 0xFF	; 255
 876:	79 f0       	breq	.+30     	; 0x896 <__fp_splitA+0x2a>
 878:	87 95       	ror	r24
 87a:	08 95       	ret
 87c:	12 16       	cp	r1, r18
 87e:	13 06       	cpc	r1, r19
 880:	14 06       	cpc	r1, r20
 882:	55 1f       	adc	r21, r21
 884:	f2 cf       	rjmp	.-28     	; 0x86a <__fp_split3+0xe>
 886:	46 95       	lsr	r20
 888:	f1 df       	rcall	.-30     	; 0x86c <__fp_splitA>
 88a:	08 c0       	rjmp	.+16     	; 0x89c <__fp_splitA+0x30>
 88c:	16 16       	cp	r1, r22
 88e:	17 06       	cpc	r1, r23
 890:	18 06       	cpc	r1, r24
 892:	99 1f       	adc	r25, r25
 894:	f1 cf       	rjmp	.-30     	; 0x878 <__fp_splitA+0xc>
 896:	86 95       	lsr	r24
 898:	71 05       	cpc	r23, r1
 89a:	61 05       	cpc	r22, r1
 89c:	08 94       	sec
 89e:	08 95       	ret

000008a0 <__fp_zero>:
 8a0:	e8 94       	clt

000008a2 <__fp_szero>:
 8a2:	bb 27       	eor	r27, r27
 8a4:	66 27       	eor	r22, r22
 8a6:	77 27       	eor	r23, r23
 8a8:	cb 01       	movw	r24, r22
 8aa:	97 f9       	bld	r25, 7
 8ac:	08 95       	ret

000008ae <__mulsf3>:
 8ae:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__mulsf3x>
 8b2:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_round>
 8b6:	0e 94 0f 04 	call	0x81e	; 0x81e <__fp_pscA>
 8ba:	38 f0       	brcs	.+14     	; 0x8ca <__mulsf3+0x1c>
 8bc:	0e 94 16 04 	call	0x82c	; 0x82c <__fp_pscB>
 8c0:	20 f0       	brcs	.+8      	; 0x8ca <__mulsf3+0x1c>
 8c2:	95 23       	and	r25, r21
 8c4:	11 f0       	breq	.+4      	; 0x8ca <__mulsf3+0x1c>
 8c6:	0c 94 06 04 	jmp	0x80c	; 0x80c <__fp_inf>
 8ca:	0c 94 0c 04 	jmp	0x818	; 0x818 <__fp_nan>
 8ce:	11 24       	eor	r1, r1
 8d0:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_szero>

000008d4 <__mulsf3x>:
 8d4:	0e 94 2e 04 	call	0x85c	; 0x85c <__fp_split3>
 8d8:	70 f3       	brcs	.-36     	; 0x8b6 <__mulsf3+0x8>

000008da <__mulsf3_pse>:
 8da:	95 9f       	mul	r25, r21
 8dc:	c1 f3       	breq	.-16     	; 0x8ce <__mulsf3+0x20>
 8de:	95 0f       	add	r25, r21
 8e0:	50 e0       	ldi	r21, 0x00	; 0
 8e2:	55 1f       	adc	r21, r21
 8e4:	62 9f       	mul	r22, r18
 8e6:	f0 01       	movw	r30, r0
 8e8:	72 9f       	mul	r23, r18
 8ea:	bb 27       	eor	r27, r27
 8ec:	f0 0d       	add	r31, r0
 8ee:	b1 1d       	adc	r27, r1
 8f0:	63 9f       	mul	r22, r19
 8f2:	aa 27       	eor	r26, r26
 8f4:	f0 0d       	add	r31, r0
 8f6:	b1 1d       	adc	r27, r1
 8f8:	aa 1f       	adc	r26, r26
 8fa:	64 9f       	mul	r22, r20
 8fc:	66 27       	eor	r22, r22
 8fe:	b0 0d       	add	r27, r0
 900:	a1 1d       	adc	r26, r1
 902:	66 1f       	adc	r22, r22
 904:	82 9f       	mul	r24, r18
 906:	22 27       	eor	r18, r18
 908:	b0 0d       	add	r27, r0
 90a:	a1 1d       	adc	r26, r1
 90c:	62 1f       	adc	r22, r18
 90e:	73 9f       	mul	r23, r19
 910:	b0 0d       	add	r27, r0
 912:	a1 1d       	adc	r26, r1
 914:	62 1f       	adc	r22, r18
 916:	83 9f       	mul	r24, r19
 918:	a0 0d       	add	r26, r0
 91a:	61 1d       	adc	r22, r1
 91c:	22 1f       	adc	r18, r18
 91e:	74 9f       	mul	r23, r20
 920:	33 27       	eor	r19, r19
 922:	a0 0d       	add	r26, r0
 924:	61 1d       	adc	r22, r1
 926:	23 1f       	adc	r18, r19
 928:	84 9f       	mul	r24, r20
 92a:	60 0d       	add	r22, r0
 92c:	21 1d       	adc	r18, r1
 92e:	82 2f       	mov	r24, r18
 930:	76 2f       	mov	r23, r22
 932:	6a 2f       	mov	r22, r26
 934:	11 24       	eor	r1, r1
 936:	9f 57       	subi	r25, 0x7F	; 127
 938:	50 40       	sbci	r21, 0x00	; 0
 93a:	9a f0       	brmi	.+38     	; 0x962 <__stack+0x63>
 93c:	f1 f0       	breq	.+60     	; 0x97a <__stack+0x7b>
 93e:	88 23       	and	r24, r24
 940:	4a f0       	brmi	.+18     	; 0x954 <__stack+0x55>
 942:	ee 0f       	add	r30, r30
 944:	ff 1f       	adc	r31, r31
 946:	bb 1f       	adc	r27, r27
 948:	66 1f       	adc	r22, r22
 94a:	77 1f       	adc	r23, r23
 94c:	88 1f       	adc	r24, r24
 94e:	91 50       	subi	r25, 0x01	; 1
 950:	50 40       	sbci	r21, 0x00	; 0
 952:	a9 f7       	brne	.-22     	; 0x93e <__stack+0x3f>
 954:	9e 3f       	cpi	r25, 0xFE	; 254
 956:	51 05       	cpc	r21, r1
 958:	80 f0       	brcs	.+32     	; 0x97a <__stack+0x7b>
 95a:	0c 94 06 04 	jmp	0x80c	; 0x80c <__fp_inf>
 95e:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_szero>
 962:	5f 3f       	cpi	r21, 0xFF	; 255
 964:	e4 f3       	brlt	.-8      	; 0x95e <__stack+0x5f>
 966:	98 3e       	cpi	r25, 0xE8	; 232
 968:	d4 f3       	brlt	.-12     	; 0x95e <__stack+0x5f>
 96a:	86 95       	lsr	r24
 96c:	77 95       	ror	r23
 96e:	67 95       	ror	r22
 970:	b7 95       	ror	r27
 972:	f7 95       	ror	r31
 974:	e7 95       	ror	r30
 976:	9f 5f       	subi	r25, 0xFF	; 255
 978:	c1 f7       	brne	.-16     	; 0x96a <__stack+0x6b>
 97a:	fe 2b       	or	r31, r30
 97c:	88 0f       	add	r24, r24
 97e:	91 1d       	adc	r25, r1
 980:	96 95       	lsr	r25
 982:	87 95       	ror	r24
 984:	97 f9       	bld	r25, 7
 986:	08 95       	ret

00000988 <__udivmodsi4>:
 988:	a1 e2       	ldi	r26, 0x21	; 33
 98a:	1a 2e       	mov	r1, r26
 98c:	aa 1b       	sub	r26, r26
 98e:	bb 1b       	sub	r27, r27
 990:	fd 01       	movw	r30, r26
 992:	0d c0       	rjmp	.+26     	; 0x9ae <__udivmodsi4_ep>

00000994 <__udivmodsi4_loop>:
 994:	aa 1f       	adc	r26, r26
 996:	bb 1f       	adc	r27, r27
 998:	ee 1f       	adc	r30, r30
 99a:	ff 1f       	adc	r31, r31
 99c:	a2 17       	cp	r26, r18
 99e:	b3 07       	cpc	r27, r19
 9a0:	e4 07       	cpc	r30, r20
 9a2:	f5 07       	cpc	r31, r21
 9a4:	20 f0       	brcs	.+8      	; 0x9ae <__udivmodsi4_ep>
 9a6:	a2 1b       	sub	r26, r18
 9a8:	b3 0b       	sbc	r27, r19
 9aa:	e4 0b       	sbc	r30, r20
 9ac:	f5 0b       	sbc	r31, r21

000009ae <__udivmodsi4_ep>:
 9ae:	66 1f       	adc	r22, r22
 9b0:	77 1f       	adc	r23, r23
 9b2:	88 1f       	adc	r24, r24
 9b4:	99 1f       	adc	r25, r25
 9b6:	1a 94       	dec	r1
 9b8:	69 f7       	brne	.-38     	; 0x994 <__udivmodsi4_loop>
 9ba:	60 95       	com	r22
 9bc:	70 95       	com	r23
 9be:	80 95       	com	r24
 9c0:	90 95       	com	r25
 9c2:	9b 01       	movw	r18, r22
 9c4:	ac 01       	movw	r20, r24
 9c6:	bd 01       	movw	r22, r26
 9c8:	cf 01       	movw	r24, r30
 9ca:	08 95       	ret

000009cc <_exit>:
 9cc:	f8 94       	cli

000009ce <__stop_program>:
 9ce:	ff cf       	rjmp	.-2      	; 0x9ce <__stop_program>
