
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000814  000008a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000814  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  00800102  00800102  000008aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000de8  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c9  00000000  00000000  000017e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000076b  00000000  00000000  000021ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  00002918  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000595  00000000  00000000  00002b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000553  00000000  00000000  000030e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003638  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e1       	ldi	r30, 0x14	; 20
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 32       	cpi	r26, 0x29	; 41
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 1a 02 	call	0x434	; 0x434 <main>
  9e:	0c 94 08 04 	jmp	0x810	; 0x810 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.            
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  b0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  b4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
  b8:	89 2b       	or	r24, r25
  ba:	81 f0       	breq	.+32     	; 0xdc <SCH_Add_Task+0x36>
  bc:	e2 e0       	ldi	r30, 0x02	; 2
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
  c4:	82 2f       	mov	r24, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  c6:	e9 01       	movw	r28, r18
  c8:	a7 81       	ldd	r26, Z+7	; 0x07
  ca:	b0 85       	ldd	r27, Z+8	; 0x08
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	37 96       	adiw	r30, 0x07	; 7
  d2:	ab 2b       	or	r26, r27
  d4:	b9 f7       	brne	.-18     	; 0xc4 <SCH_Add_Task+0x1e>
   {
      Index++;
   }

   // Have we reached the end of the list?   
   if(Index == SCH_MAX_TASKS)
  d6:	85 30       	cpi	r24, 0x05	; 5
  d8:	21 f4       	brne	.+8      	; 0xe2 <SCH_Add_Task+0x3c>
  da:	15 c0       	rjmp	.+42     	; 0x106 <SCH_Add_Task+0x60>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
  e0:	80 e0       	ldi	r24, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;  
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
  e2:	fe 01       	movw	r30, r28
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ec 1b       	sub	r30, r28
  f2:	fd 0b       	sbc	r31, r29
  f4:	ee 5f       	subi	r30, 0xFE	; 254
  f6:	fe 4f       	sbci	r31, 0xFE	; 254
  f8:	11 83       	std	Z+1, r17	; 0x01
  fa:	00 83       	st	Z, r16
   SCH_tasks_G[Index].Delay =DELAY;
  fc:	73 83       	std	Z+3, r23	; 0x03
  fe:	62 83       	std	Z+2, r22	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
 100:	55 83       	std	Z+5, r21	; 0x05
 102:	44 83       	std	Z+4, r20	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
 104:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
 110:	27 e0       	ldi	r18, 0x07	; 7
 112:	82 9f       	mul	r24, r18
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	fc 01       	movw	r30, r24
 11a:	ee 5f       	subi	r30, 0xFE	; 254
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
 122:	13 82       	std	Z+3, r1	; 0x03
 124:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
 126:	15 82       	std	Z+5, r1	; 0x05
 128:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
 12a:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret

00000130 <SCH_Dispatch_Tasks>:
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	c2 e0       	ldi	r28, 0x02	; 2
 13c:	d1 e0       	ldi	r29, 0x01	; 1
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 13e:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
 140:	8e 81       	ldd	r24, Y+6	; 0x06
 142:	88 23       	and	r24, r24
 144:	79 f0       	breq	.+30     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 146:	e8 81       	ld	r30, Y
 148:	f9 81       	ldd	r31, Y+1	; 0x01
 14a:	30 97       	sbiw	r30, 0x00	; 0
 14c:	59 f0       	breq	.+22     	; 0x164 <SCH_Dispatch_Tasks+0x34>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
 14e:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	81 50       	subi	r24, 0x01	; 1
 154:	8e 83       	std	Y+6, r24	; 0x06

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	89 2b       	or	r24, r25
 15c:	19 f4       	brne	.+6      	; 0x164 <SCH_Dispatch_Tasks+0x34>
         {
            SCH_Delete_Task(Index);
 15e:	81 2f       	mov	r24, r17
 160:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 164:	1f 5f       	subi	r17, 0xFF	; 255
 166:	27 96       	adiw	r28, 0x07	; 7
 168:	15 30       	cpi	r17, 0x05	; 5
 16a:	51 f7       	brne	.-44     	; 0x140 <SCH_Dispatch_Tasks+0x10>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <SCH_Init_T1>:
  You must call this function before using the scheduler.  

-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
 178:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 17a:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	c5 30       	cpi	r28, 0x05	; 5
 186:	d1 f7       	brne	.-12     	; 0x17c <SCH_Init_T1+0x4>

   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR1A = (uint16_t)625;   		     // 10ms = (256/16.000.000) * 625
 188:	81 e7       	ldi	r24, 0x71	; 113
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 190:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
   TCCR1B = (1 << CS12) | (1 << WGM12);  // prescale op 64, top counter = value OCR1A (CTC mode)
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
   TIMSK1 = 1 << OCIE1A;   		     // Timer 1 Output Compare A Match Interrupt Enable
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
}
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <SCH_Start>:
 
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
 1a4:	78 94       	sei
 1a6:	08 95       	ret

000001a8 <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
 1c2:	e2 e0       	ldi	r30, 0x02	; 2
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	25 e2       	ldi	r18, 0x25	; 37
 1c8:	31 e0       	ldi	r19, 0x01	; 1
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	89 2b       	or	r24, r25
 1d0:	91 f0       	breq	.+36     	; 0x1f6 <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	93 81       	ldd	r25, Z+3	; 0x03
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
 1da:	86 81       	ldd	r24, Z+6	; 0x06
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
 1e0:	84 81       	ldd	r24, Z+4	; 0x04
 1e2:	95 81       	ldd	r25, Z+5	; 0x05
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	93 83       	std	Z+3, r25	; 0x03
 1ec:	82 83       	std	Z+2, r24	; 0x02
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	93 83       	std	Z+3, r25	; 0x03
 1f4:	82 83       	std	Z+2, r24	; 0x02
 1f6:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 1f8:	e2 17       	cp	r30, r18
 1fa:	f3 07       	cpc	r31, r19
 1fc:	31 f7       	brne	.-52     	; 0x1ca <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <receive>:


// initiliseren van functies

void setup(void){
	DDRC = 0x00;
 218:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 21c:	88 23       	and	r24, r24
 21e:	44 f0       	brlt	.+16     	; 0x230 <receive+0x18>
 220:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 224:	85 33       	cpi	r24, 0x35	; 53
 226:	09 f4       	brne	.+2      	; 0x22a <receive+0x12>
 228:	85 b1       	in	r24, 0x05	; 5
 22a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 22e:	08 95       	ret
 230:	08 95       	ret

00000232 <USART_init>:
 232:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 236:	83 e3       	ldi	r24, 0x33	; 51
 238:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 23c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 240:	88 e1       	ldi	r24, 0x18	; 24
 242:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 246:	86 e0       	ldi	r24, 0x06	; 6
 248:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 24c:	08 95       	ret

0000024e <send>:
 24e:	e0 ec       	ldi	r30, 0xC0	; 192
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	90 81       	ld	r25, Z
 254:	95 ff       	sbrs	r25, 5
 256:	fd cf       	rjmp	.-6      	; 0x252 <send+0x4>
 258:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 25c:	08 95       	ret

0000025e <USART_putstring>:
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	ec 01       	movw	r28, r24
 264:	88 81       	ld	r24, Y
 266:	88 23       	and	r24, r24
 268:	31 f0       	breq	.+12     	; 0x276 <USART_putstring+0x18>
 26a:	21 96       	adiw	r28, 0x01	; 1
 26c:	0e 94 27 01 	call	0x24e	; 0x24e <send>
 270:	89 91       	ld	r24, Y+
 272:	81 11       	cpse	r24, r1
 274:	fb cf       	rjmp	.-10     	; 0x26c <USART_putstring+0xe>
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <UU_PutNumber>:
 27c:	8f 92       	push	r8
 27e:	9f 92       	push	r9
 280:	af 92       	push	r10
 282:	bf 92       	push	r11
 284:	ef 92       	push	r14
 286:	ff 92       	push	r15
 288:	0f 93       	push	r16
 28a:	1f 93       	push	r17
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
 294:	2a 97       	sbiw	r28, 0x0a	; 10
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	f8 94       	cli
 29a:	de bf       	out	0x3e, r29	; 62
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	cd bf       	out	0x3d, r28	; 61
 2a0:	9e 01       	movw	r18, r28
 2a2:	2f 5f       	subi	r18, 0xFF	; 255
 2a4:	3f 4f       	sbci	r19, 0xFF	; 255
 2a6:	79 01       	movw	r14, r18
 2a8:	00 e0       	ldi	r16, 0x00	; 0
 2aa:	10 e0       	ldi	r17, 0x00	; 0
 2ac:	0f 2e       	mov	r0, r31
 2ae:	fa e0       	ldi	r31, 0x0A	; 10
 2b0:	8f 2e       	mov	r8, r31
 2b2:	91 2c       	mov	r9, r1
 2b4:	a1 2c       	mov	r10, r1
 2b6:	b1 2c       	mov	r11, r1
 2b8:	f0 2d       	mov	r31, r0
 2ba:	0f 5f       	subi	r16, 0xFF	; 255
 2bc:	1f 4f       	sbci	r17, 0xFF	; 255
 2be:	a5 01       	movw	r20, r10
 2c0:	94 01       	movw	r18, r8
 2c2:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__udivmodsi4>
 2c6:	60 5d       	subi	r22, 0xD0	; 208
 2c8:	f7 01       	movw	r30, r14
 2ca:	61 93       	st	Z+, r22
 2cc:	7f 01       	movw	r14, r30
 2ce:	62 2f       	mov	r22, r18
 2d0:	73 2f       	mov	r23, r19
 2d2:	84 2f       	mov	r24, r20
 2d4:	95 2f       	mov	r25, r21
 2d6:	61 15       	cp	r22, r1
 2d8:	71 05       	cpc	r23, r1
 2da:	81 05       	cpc	r24, r1
 2dc:	91 05       	cpc	r25, r1
 2de:	69 f7       	brne	.-38     	; 0x2ba <UU_PutNumber+0x3e>
 2e0:	01 15       	cp	r16, r1
 2e2:	11 05       	cpc	r17, r1
 2e4:	89 f0       	breq	.+34     	; 0x308 <UU_PutNumber+0x8c>
 2e6:	ee 24       	eor	r14, r14
 2e8:	e3 94       	inc	r14
 2ea:	f1 2c       	mov	r15, r1
 2ec:	ec 0e       	add	r14, r28
 2ee:	fd 1e       	adc	r15, r29
 2f0:	e0 0e       	add	r14, r16
 2f2:	f1 1e       	adc	r15, r17
 2f4:	01 50       	subi	r16, 0x01	; 1
 2f6:	11 09       	sbc	r17, r1
 2f8:	f7 01       	movw	r30, r14
 2fa:	82 91       	ld	r24, -Z
 2fc:	7f 01       	movw	r14, r30
 2fe:	0e 94 27 01 	call	0x24e	; 0x24e <send>
 302:	01 15       	cp	r16, r1
 304:	11 05       	cpc	r17, r1
 306:	b1 f7       	brne	.-20     	; 0x2f4 <UU_PutNumber+0x78>
 308:	2a 96       	adiw	r28, 0x0a	; 10
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	f8 94       	cli
 30e:	de bf       	out	0x3e, r29	; 62
 310:	0f be       	out	0x3f, r0	; 63
 312:	cd bf       	out	0x3d, r28	; 61
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	1f 91       	pop	r17
 31a:	0f 91       	pop	r16
 31c:	ff 90       	pop	r15
 31e:	ef 90       	pop	r14
 320:	bf 90       	pop	r11
 322:	af 90       	pop	r10
 324:	9f 90       	pop	r9
 326:	8f 90       	pop	r8
 328:	08 95       	ret

0000032a <adc_init>:
}

void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
 32a:	80 e4       	ldi	r24, 0x40	; 64
 32c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 330:	87 e8       	ldi	r24, 0x87	; 135
 332:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 336:	08 95       	ret

00000338 <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
 338:	ec e7       	ldi	r30, 0x7C	; 124
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	90 81       	ld	r25, Z
 33e:	98 7f       	andi	r25, 0xF8	; 248
 340:	87 70       	andi	r24, 0x07	; 7
 342:	89 2b       	or	r24, r25
 344:	80 83       	st	Z, r24
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
 346:	ea e7       	ldi	r30, 0x7A	; 122
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	80 64       	ori	r24, 0x40	; 64
 34e:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
 350:	80 81       	ld	r24, Z
 352:	86 fd       	sbrc	r24, 6
 354:	fd cf       	rjmp	.-6      	; 0x350 <adc_read+0x18>
	
	return (ADC);
 356:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 35a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 35e:	08 95       	ret

00000360 <licht_waarde>:

int licht_waarde(){
	int result;
	adc_result0 = adc_read(0);      // read adc value at PA0
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 9c 01 	call	0x338	; 0x338 <adc_read>
 366:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <adc_result0+0x1>
 36a:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <adc_result0>
	if (adc_result0 < 150)
 36e:	86 39       	cpi	r24, 0x96	; 150
 370:	91 05       	cpc	r25, r1
 372:	88 f0       	brcs	.+34     	; 0x396 <licht_waarde+0x36>
	{
		result = 0;
		return result;
	}
	if (adc_result0 >150 && adc_result0 <300)
 374:	9c 01       	movw	r18, r24
 376:	27 59       	subi	r18, 0x97	; 151
 378:	31 09       	sbc	r19, r1
 37a:	25 39       	cpi	r18, 0x95	; 149
 37c:	31 05       	cpc	r19, r1
 37e:	70 f0       	brcs	.+28     	; 0x39c <licht_waarde+0x3c>
	{
		result = 1;
		return result;
	}
	if (adc_result0 >300 && adc_result0 <750)
 380:	26 59       	subi	r18, 0x96	; 150
 382:	31 09       	sbc	r19, r1
 384:	21 3c       	cpi	r18, 0xC1	; 193
 386:	31 40       	sbci	r19, 0x01	; 1
 388:	60 f0       	brcs	.+24     	; 0x3a2 <licht_waarde+0x42>
	{
		result = 2;
		return result;
	}
	if (adc_result0 > 750)
 38a:	8f 3e       	cpi	r24, 0xEF	; 239
 38c:	92 40       	sbci	r25, 0x02	; 2
 38e:	60 f4       	brcc	.+24     	; 0x3a8 <licht_waarde+0x48>
	{
		result = 3;
		return result;
	}
	return result = 100;
 390:	84 e6       	ldi	r24, 0x64	; 100
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	08 95       	ret
	int result;
	adc_result0 = adc_read(0);      // read adc value at PA0
	if (adc_result0 < 150)
	{
		result = 0;
		return result;
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	08 95       	ret
	}
	if (adc_result0 >150 && adc_result0 <300)
	{
		result = 1;
		return result;
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	08 95       	ret
	}
	if (adc_result0 >300 && adc_result0 <750)
	{
		result = 2;
		return result;
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	08 95       	ret
	}
	if (adc_result0 > 750)
	{
		result = 3;
		return result;
 3a8:	83 e0       	ldi	r24, 0x03	; 3
 3aa:	90 e0       	ldi	r25, 0x00	; 0
	}
	return result = 100;
}
 3ac:	08 95       	ret

000003ae <temp>:

int temp(){
	adc_result1 = adc_read(1);
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	0e 94 9c 01 	call	0x338	; 0x338 <adc_read>
 3b4:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <adc_result1+0x1>
 3b8:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <adc_result1>
	float voltage = adc_result1 * 5.0;
 3bc:	bc 01       	movw	r22, r24
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__floatunsisf>
 3c6:	20 e0       	ldi	r18, 0x00	; 0
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	40 ea       	ldi	r20, 0xA0	; 160
 3cc:	50 e4       	ldi	r21, 0x40	; 64
 3ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__mulsf3>
	voltage /= 1024.0;
	float temperatureC = (voltage - 0.5) * 10;
	int temp_int = temperatureC * 100;
	return temp_int;
 3d2:	20 e0       	ldi	r18, 0x00	; 0
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	40 e8       	ldi	r20, 0x80	; 128
 3d8:	5a e3       	ldi	r21, 0x3A	; 58
 3da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__mulsf3>
 3de:	20 e0       	ldi	r18, 0x00	; 0
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	40 e0       	ldi	r20, 0x00	; 0
 3e4:	5f e3       	ldi	r21, 0x3F	; 63
 3e6:	0e 94 48 02 	call	0x490	; 0x490 <__subsf3>
 3ea:	20 e0       	ldi	r18, 0x00	; 0
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	40 e2       	ldi	r20, 0x20	; 32
 3f0:	51 e4       	ldi	r21, 0x41	; 65
 3f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__mulsf3>
 3f6:	20 e0       	ldi	r18, 0x00	; 0
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	48 ec       	ldi	r20, 0xC8	; 200
 3fc:	52 e4       	ldi	r21, 0x42	; 66
 3fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__mulsf3>
 402:	0e 94 b5 02 	call	0x56a	; 0x56a <__fixsfsi>
}
 406:	cb 01       	movw	r24, r22
 408:	08 95       	ret

0000040a <send_data>:


void send_data(void){
	USART_putstring("x");
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	0e 94 2f 01 	call	0x25e	; 0x25e <USART_putstring>
	UU_PutNumber(licht_waarde());
 412:	0e 94 b0 01 	call	0x360	; 0x360 <licht_waarde>
 416:	bc 01       	movw	r22, r24
 418:	99 0f       	add	r25, r25
 41a:	88 0b       	sbc	r24, r24
 41c:	99 0b       	sbc	r25, r25
 41e:	0e 94 3e 01 	call	0x27c	; 0x27c <UU_PutNumber>
	UU_PutNumber(temp());
 422:	0e 94 d7 01 	call	0x3ae	; 0x3ae <temp>
 426:	bc 01       	movw	r22, r24
 428:	99 0f       	add	r25, r25
 42a:	88 0b       	sbc	r24, r24
 42c:	99 0b       	sbc	r25, r25
 42e:	0e 94 3e 01 	call	0x27c	; 0x27c <UU_PutNumber>
 432:	08 95       	ret

00000434 <main>:


// initiliseren van functies

void setup(void){
	DDRC = 0x00;
 434:	17 b8       	out	0x07, r1	; 7
	
}

void led_init()
{
	DDRB = 0xFF;
 436:	8f ef       	ldi	r24, 0xFF	; 255
 438:	84 b9       	out	0x04, r24	; 4

int main()
{
	setup();
	led_init();
	adc_init();
 43a:	0e 94 95 01 	call	0x32a	; 0x32a <adc_init>
	USART_init();
 43e:	0e 94 19 01 	call	0x232	; 0x232 <USART_init>
	
	SCH_Init_T1();
 442:	0e 94 bc 00 	call	0x178	; 0x178 <SCH_Init_T1>
//	SCH_Add_Task(lichtcheck,0,10);
//	SCH_Add_Task(licht_voorkeur_check,0,10);
	SCH_Add_Task(temp,0,400);
 446:	40 e9       	ldi	r20, 0x90	; 144
 448:	51 e0       	ldi	r21, 0x01	; 1
 44a:	60 e0       	ldi	r22, 0x00	; 0
 44c:	70 e0       	ldi	r23, 0x00	; 0
 44e:	87 ed       	ldi	r24, 0xD7	; 215
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(licht_waarde,0,300);
 456:	4c e2       	ldi	r20, 0x2C	; 44
 458:	51 e0       	ldi	r21, 0x01	; 1
 45a:	60 e0       	ldi	r22, 0x00	; 0
 45c:	70 e0       	ldi	r23, 0x00	; 0
 45e:	80 eb       	ldi	r24, 0xB0	; 176
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(send_data,0,600);
 466:	48 e5       	ldi	r20, 0x58	; 88
 468:	52 e0       	ldi	r21, 0x02	; 2
 46a:	60 e0       	ldi	r22, 0x00	; 0
 46c:	70 e0       	ldi	r23, 0x00	; 0
 46e:	85 e0       	ldi	r24, 0x05	; 5
 470:	92 e0       	ldi	r25, 0x02	; 2
 472:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
//	SCH_Add_Task(gebruikers_voorkeur,0,600);
	SCH_Add_Task(receive,0,10);
 476:	4a e0       	ldi	r20, 0x0A	; 10
 478:	50 e0       	ldi	r21, 0x00	; 0
 47a:	60 e0       	ldi	r22, 0x00	; 0
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	8c e0       	ldi	r24, 0x0C	; 12
 480:	91 e0       	ldi	r25, 0x01	; 1
 482:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	
	
	SCH_Start();
 486:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SCH_Start>
	while(1){
		SCH_Dispatch_Tasks();
 48a:	0e 94 98 00 	call	0x130	; 0x130 <SCH_Dispatch_Tasks>
 48e:	fd cf       	rjmp	.-6      	; 0x48a <main+0x56>

00000490 <__subsf3>:
 490:	50 58       	subi	r21, 0x80	; 128

00000492 <__addsf3>:
 492:	bb 27       	eor	r27, r27
 494:	aa 27       	eor	r26, r26
 496:	0e 94 60 02 	call	0x4c0	; 0x4c0 <__addsf3x>
 49a:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__fp_round>
 49e:	0e 94 31 03 	call	0x662	; 0x662 <__fp_pscA>
 4a2:	38 f0       	brcs	.+14     	; 0x4b2 <__addsf3+0x20>
 4a4:	0e 94 38 03 	call	0x670	; 0x670 <__fp_pscB>
 4a8:	20 f0       	brcs	.+8      	; 0x4b2 <__addsf3+0x20>
 4aa:	39 f4       	brne	.+14     	; 0x4ba <__addsf3+0x28>
 4ac:	9f 3f       	cpi	r25, 0xFF	; 255
 4ae:	19 f4       	brne	.+6      	; 0x4b6 <__addsf3+0x24>
 4b0:	26 f4       	brtc	.+8      	; 0x4ba <__addsf3+0x28>
 4b2:	0c 94 2e 03 	jmp	0x65c	; 0x65c <__fp_nan>
 4b6:	0e f4       	brtc	.+2      	; 0x4ba <__addsf3+0x28>
 4b8:	e0 95       	com	r30
 4ba:	e7 fb       	bst	r30, 7
 4bc:	0c 94 28 03 	jmp	0x650	; 0x650 <__fp_inf>

000004c0 <__addsf3x>:
 4c0:	e9 2f       	mov	r30, r25
 4c2:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__fp_split3>
 4c6:	58 f3       	brcs	.-42     	; 0x49e <__addsf3+0xc>
 4c8:	ba 17       	cp	r27, r26
 4ca:	62 07       	cpc	r22, r18
 4cc:	73 07       	cpc	r23, r19
 4ce:	84 07       	cpc	r24, r20
 4d0:	95 07       	cpc	r25, r21
 4d2:	20 f0       	brcs	.+8      	; 0x4dc <__addsf3x+0x1c>
 4d4:	79 f4       	brne	.+30     	; 0x4f4 <__addsf3x+0x34>
 4d6:	a6 f5       	brtc	.+104    	; 0x540 <__addsf3x+0x80>
 4d8:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__fp_zero>
 4dc:	0e f4       	brtc	.+2      	; 0x4e0 <__addsf3x+0x20>
 4de:	e0 95       	com	r30
 4e0:	0b 2e       	mov	r0, r27
 4e2:	ba 2f       	mov	r27, r26
 4e4:	a0 2d       	mov	r26, r0
 4e6:	0b 01       	movw	r0, r22
 4e8:	b9 01       	movw	r22, r18
 4ea:	90 01       	movw	r18, r0
 4ec:	0c 01       	movw	r0, r24
 4ee:	ca 01       	movw	r24, r20
 4f0:	a0 01       	movw	r20, r0
 4f2:	11 24       	eor	r1, r1
 4f4:	ff 27       	eor	r31, r31
 4f6:	59 1b       	sub	r21, r25
 4f8:	99 f0       	breq	.+38     	; 0x520 <__addsf3x+0x60>
 4fa:	59 3f       	cpi	r21, 0xF9	; 249
 4fc:	50 f4       	brcc	.+20     	; 0x512 <__addsf3x+0x52>
 4fe:	50 3e       	cpi	r21, 0xE0	; 224
 500:	68 f1       	brcs	.+90     	; 0x55c <__addsf3x+0x9c>
 502:	1a 16       	cp	r1, r26
 504:	f0 40       	sbci	r31, 0x00	; 0
 506:	a2 2f       	mov	r26, r18
 508:	23 2f       	mov	r18, r19
 50a:	34 2f       	mov	r19, r20
 50c:	44 27       	eor	r20, r20
 50e:	58 5f       	subi	r21, 0xF8	; 248
 510:	f3 cf       	rjmp	.-26     	; 0x4f8 <__addsf3x+0x38>
 512:	46 95       	lsr	r20
 514:	37 95       	ror	r19
 516:	27 95       	ror	r18
 518:	a7 95       	ror	r26
 51a:	f0 40       	sbci	r31, 0x00	; 0
 51c:	53 95       	inc	r21
 51e:	c9 f7       	brne	.-14     	; 0x512 <__addsf3x+0x52>
 520:	7e f4       	brtc	.+30     	; 0x540 <__addsf3x+0x80>
 522:	1f 16       	cp	r1, r31
 524:	ba 0b       	sbc	r27, r26
 526:	62 0b       	sbc	r22, r18
 528:	73 0b       	sbc	r23, r19
 52a:	84 0b       	sbc	r24, r20
 52c:	ba f0       	brmi	.+46     	; 0x55c <__addsf3x+0x9c>
 52e:	91 50       	subi	r25, 0x01	; 1
 530:	a1 f0       	breq	.+40     	; 0x55a <__addsf3x+0x9a>
 532:	ff 0f       	add	r31, r31
 534:	bb 1f       	adc	r27, r27
 536:	66 1f       	adc	r22, r22
 538:	77 1f       	adc	r23, r23
 53a:	88 1f       	adc	r24, r24
 53c:	c2 f7       	brpl	.-16     	; 0x52e <__addsf3x+0x6e>
 53e:	0e c0       	rjmp	.+28     	; 0x55c <__addsf3x+0x9c>
 540:	ba 0f       	add	r27, r26
 542:	62 1f       	adc	r22, r18
 544:	73 1f       	adc	r23, r19
 546:	84 1f       	adc	r24, r20
 548:	48 f4       	brcc	.+18     	; 0x55c <__addsf3x+0x9c>
 54a:	87 95       	ror	r24
 54c:	77 95       	ror	r23
 54e:	67 95       	ror	r22
 550:	b7 95       	ror	r27
 552:	f7 95       	ror	r31
 554:	9e 3f       	cpi	r25, 0xFE	; 254
 556:	08 f0       	brcs	.+2      	; 0x55a <__addsf3x+0x9a>
 558:	b0 cf       	rjmp	.-160    	; 0x4ba <__addsf3+0x28>
 55a:	93 95       	inc	r25
 55c:	88 0f       	add	r24, r24
 55e:	08 f0       	brcs	.+2      	; 0x562 <__addsf3x+0xa2>
 560:	99 27       	eor	r25, r25
 562:	ee 0f       	add	r30, r30
 564:	97 95       	ror	r25
 566:	87 95       	ror	r24
 568:	08 95       	ret

0000056a <__fixsfsi>:
 56a:	0e 94 bc 02 	call	0x578	; 0x578 <__fixunssfsi>
 56e:	68 94       	set
 570:	b1 11       	cpse	r27, r1
 572:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <__fp_szero>
 576:	08 95       	ret

00000578 <__fixunssfsi>:
 578:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__fp_splitA>
 57c:	88 f0       	brcs	.+34     	; 0x5a0 <__fixunssfsi+0x28>
 57e:	9f 57       	subi	r25, 0x7F	; 127
 580:	98 f0       	brcs	.+38     	; 0x5a8 <__fixunssfsi+0x30>
 582:	b9 2f       	mov	r27, r25
 584:	99 27       	eor	r25, r25
 586:	b7 51       	subi	r27, 0x17	; 23
 588:	b0 f0       	brcs	.+44     	; 0x5b6 <__fixunssfsi+0x3e>
 58a:	e1 f0       	breq	.+56     	; 0x5c4 <__fixunssfsi+0x4c>
 58c:	66 0f       	add	r22, r22
 58e:	77 1f       	adc	r23, r23
 590:	88 1f       	adc	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	1a f0       	brmi	.+6      	; 0x59c <__fixunssfsi+0x24>
 596:	ba 95       	dec	r27
 598:	c9 f7       	brne	.-14     	; 0x58c <__fixunssfsi+0x14>
 59a:	14 c0       	rjmp	.+40     	; 0x5c4 <__fixunssfsi+0x4c>
 59c:	b1 30       	cpi	r27, 0x01	; 1
 59e:	91 f0       	breq	.+36     	; 0x5c4 <__fixunssfsi+0x4c>
 5a0:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__fp_zero>
 5a4:	b1 e0       	ldi	r27, 0x01	; 1
 5a6:	08 95       	ret
 5a8:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__fp_zero>
 5ac:	67 2f       	mov	r22, r23
 5ae:	78 2f       	mov	r23, r24
 5b0:	88 27       	eor	r24, r24
 5b2:	b8 5f       	subi	r27, 0xF8	; 248
 5b4:	39 f0       	breq	.+14     	; 0x5c4 <__fixunssfsi+0x4c>
 5b6:	b9 3f       	cpi	r27, 0xF9	; 249
 5b8:	cc f3       	brlt	.-14     	; 0x5ac <__fixunssfsi+0x34>
 5ba:	86 95       	lsr	r24
 5bc:	77 95       	ror	r23
 5be:	67 95       	ror	r22
 5c0:	b3 95       	inc	r27
 5c2:	d9 f7       	brne	.-10     	; 0x5ba <__fixunssfsi+0x42>
 5c4:	3e f4       	brtc	.+14     	; 0x5d4 <__fixunssfsi+0x5c>
 5c6:	90 95       	com	r25
 5c8:	80 95       	com	r24
 5ca:	70 95       	com	r23
 5cc:	61 95       	neg	r22
 5ce:	7f 4f       	sbci	r23, 0xFF	; 255
 5d0:	8f 4f       	sbci	r24, 0xFF	; 255
 5d2:	9f 4f       	sbci	r25, 0xFF	; 255
 5d4:	08 95       	ret

000005d6 <__floatunsisf>:
 5d6:	e8 94       	clt
 5d8:	09 c0       	rjmp	.+18     	; 0x5ec <__floatsisf+0x12>

000005da <__floatsisf>:
 5da:	97 fb       	bst	r25, 7
 5dc:	3e f4       	brtc	.+14     	; 0x5ec <__floatsisf+0x12>
 5de:	90 95       	com	r25
 5e0:	80 95       	com	r24
 5e2:	70 95       	com	r23
 5e4:	61 95       	neg	r22
 5e6:	7f 4f       	sbci	r23, 0xFF	; 255
 5e8:	8f 4f       	sbci	r24, 0xFF	; 255
 5ea:	9f 4f       	sbci	r25, 0xFF	; 255
 5ec:	99 23       	and	r25, r25
 5ee:	a9 f0       	breq	.+42     	; 0x61a <__floatsisf+0x40>
 5f0:	f9 2f       	mov	r31, r25
 5f2:	96 e9       	ldi	r25, 0x96	; 150
 5f4:	bb 27       	eor	r27, r27
 5f6:	93 95       	inc	r25
 5f8:	f6 95       	lsr	r31
 5fa:	87 95       	ror	r24
 5fc:	77 95       	ror	r23
 5fe:	67 95       	ror	r22
 600:	b7 95       	ror	r27
 602:	f1 11       	cpse	r31, r1
 604:	f8 cf       	rjmp	.-16     	; 0x5f6 <__floatsisf+0x1c>
 606:	fa f4       	brpl	.+62     	; 0x646 <__floatsisf+0x6c>
 608:	bb 0f       	add	r27, r27
 60a:	11 f4       	brne	.+4      	; 0x610 <__floatsisf+0x36>
 60c:	60 ff       	sbrs	r22, 0
 60e:	1b c0       	rjmp	.+54     	; 0x646 <__floatsisf+0x6c>
 610:	6f 5f       	subi	r22, 0xFF	; 255
 612:	7f 4f       	sbci	r23, 0xFF	; 255
 614:	8f 4f       	sbci	r24, 0xFF	; 255
 616:	9f 4f       	sbci	r25, 0xFF	; 255
 618:	16 c0       	rjmp	.+44     	; 0x646 <__floatsisf+0x6c>
 61a:	88 23       	and	r24, r24
 61c:	11 f0       	breq	.+4      	; 0x622 <__floatsisf+0x48>
 61e:	96 e9       	ldi	r25, 0x96	; 150
 620:	11 c0       	rjmp	.+34     	; 0x644 <__floatsisf+0x6a>
 622:	77 23       	and	r23, r23
 624:	21 f0       	breq	.+8      	; 0x62e <__floatsisf+0x54>
 626:	9e e8       	ldi	r25, 0x8E	; 142
 628:	87 2f       	mov	r24, r23
 62a:	76 2f       	mov	r23, r22
 62c:	05 c0       	rjmp	.+10     	; 0x638 <__floatsisf+0x5e>
 62e:	66 23       	and	r22, r22
 630:	71 f0       	breq	.+28     	; 0x64e <__floatsisf+0x74>
 632:	96 e8       	ldi	r25, 0x86	; 134
 634:	86 2f       	mov	r24, r22
 636:	70 e0       	ldi	r23, 0x00	; 0
 638:	60 e0       	ldi	r22, 0x00	; 0
 63a:	2a f0       	brmi	.+10     	; 0x646 <__floatsisf+0x6c>
 63c:	9a 95       	dec	r25
 63e:	66 0f       	add	r22, r22
 640:	77 1f       	adc	r23, r23
 642:	88 1f       	adc	r24, r24
 644:	da f7       	brpl	.-10     	; 0x63c <__floatsisf+0x62>
 646:	88 0f       	add	r24, r24
 648:	96 95       	lsr	r25
 64a:	87 95       	ror	r24
 64c:	97 f9       	bld	r25, 7
 64e:	08 95       	ret

00000650 <__fp_inf>:
 650:	97 f9       	bld	r25, 7
 652:	9f 67       	ori	r25, 0x7F	; 127
 654:	80 e8       	ldi	r24, 0x80	; 128
 656:	70 e0       	ldi	r23, 0x00	; 0
 658:	60 e0       	ldi	r22, 0x00	; 0
 65a:	08 95       	ret

0000065c <__fp_nan>:
 65c:	9f ef       	ldi	r25, 0xFF	; 255
 65e:	80 ec       	ldi	r24, 0xC0	; 192
 660:	08 95       	ret

00000662 <__fp_pscA>:
 662:	00 24       	eor	r0, r0
 664:	0a 94       	dec	r0
 666:	16 16       	cp	r1, r22
 668:	17 06       	cpc	r1, r23
 66a:	18 06       	cpc	r1, r24
 66c:	09 06       	cpc	r0, r25
 66e:	08 95       	ret

00000670 <__fp_pscB>:
 670:	00 24       	eor	r0, r0
 672:	0a 94       	dec	r0
 674:	12 16       	cp	r1, r18
 676:	13 06       	cpc	r1, r19
 678:	14 06       	cpc	r1, r20
 67a:	05 06       	cpc	r0, r21
 67c:	08 95       	ret

0000067e <__fp_round>:
 67e:	09 2e       	mov	r0, r25
 680:	03 94       	inc	r0
 682:	00 0c       	add	r0, r0
 684:	11 f4       	brne	.+4      	; 0x68a <__fp_round+0xc>
 686:	88 23       	and	r24, r24
 688:	52 f0       	brmi	.+20     	; 0x69e <__fp_round+0x20>
 68a:	bb 0f       	add	r27, r27
 68c:	40 f4       	brcc	.+16     	; 0x69e <__fp_round+0x20>
 68e:	bf 2b       	or	r27, r31
 690:	11 f4       	brne	.+4      	; 0x696 <__fp_round+0x18>
 692:	60 ff       	sbrs	r22, 0
 694:	04 c0       	rjmp	.+8      	; 0x69e <__fp_round+0x20>
 696:	6f 5f       	subi	r22, 0xFF	; 255
 698:	7f 4f       	sbci	r23, 0xFF	; 255
 69a:	8f 4f       	sbci	r24, 0xFF	; 255
 69c:	9f 4f       	sbci	r25, 0xFF	; 255
 69e:	08 95       	ret

000006a0 <__fp_split3>:
 6a0:	57 fd       	sbrc	r21, 7
 6a2:	90 58       	subi	r25, 0x80	; 128
 6a4:	44 0f       	add	r20, r20
 6a6:	55 1f       	adc	r21, r21
 6a8:	59 f0       	breq	.+22     	; 0x6c0 <__fp_splitA+0x10>
 6aa:	5f 3f       	cpi	r21, 0xFF	; 255
 6ac:	71 f0       	breq	.+28     	; 0x6ca <__fp_splitA+0x1a>
 6ae:	47 95       	ror	r20

000006b0 <__fp_splitA>:
 6b0:	88 0f       	add	r24, r24
 6b2:	97 fb       	bst	r25, 7
 6b4:	99 1f       	adc	r25, r25
 6b6:	61 f0       	breq	.+24     	; 0x6d0 <__fp_splitA+0x20>
 6b8:	9f 3f       	cpi	r25, 0xFF	; 255
 6ba:	79 f0       	breq	.+30     	; 0x6da <__fp_splitA+0x2a>
 6bc:	87 95       	ror	r24
 6be:	08 95       	ret
 6c0:	12 16       	cp	r1, r18
 6c2:	13 06       	cpc	r1, r19
 6c4:	14 06       	cpc	r1, r20
 6c6:	55 1f       	adc	r21, r21
 6c8:	f2 cf       	rjmp	.-28     	; 0x6ae <__fp_split3+0xe>
 6ca:	46 95       	lsr	r20
 6cc:	f1 df       	rcall	.-30     	; 0x6b0 <__fp_splitA>
 6ce:	08 c0       	rjmp	.+16     	; 0x6e0 <__fp_splitA+0x30>
 6d0:	16 16       	cp	r1, r22
 6d2:	17 06       	cpc	r1, r23
 6d4:	18 06       	cpc	r1, r24
 6d6:	99 1f       	adc	r25, r25
 6d8:	f1 cf       	rjmp	.-30     	; 0x6bc <__fp_splitA+0xc>
 6da:	86 95       	lsr	r24
 6dc:	71 05       	cpc	r23, r1
 6de:	61 05       	cpc	r22, r1
 6e0:	08 94       	sec
 6e2:	08 95       	ret

000006e4 <__fp_zero>:
 6e4:	e8 94       	clt

000006e6 <__fp_szero>:
 6e6:	bb 27       	eor	r27, r27
 6e8:	66 27       	eor	r22, r22
 6ea:	77 27       	eor	r23, r23
 6ec:	cb 01       	movw	r24, r22
 6ee:	97 f9       	bld	r25, 7
 6f0:	08 95       	ret

000006f2 <__mulsf3>:
 6f2:	0e 94 8c 03 	call	0x718	; 0x718 <__mulsf3x>
 6f6:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__fp_round>
 6fa:	0e 94 31 03 	call	0x662	; 0x662 <__fp_pscA>
 6fe:	38 f0       	brcs	.+14     	; 0x70e <__mulsf3+0x1c>
 700:	0e 94 38 03 	call	0x670	; 0x670 <__fp_pscB>
 704:	20 f0       	brcs	.+8      	; 0x70e <__mulsf3+0x1c>
 706:	95 23       	and	r25, r21
 708:	11 f0       	breq	.+4      	; 0x70e <__mulsf3+0x1c>
 70a:	0c 94 28 03 	jmp	0x650	; 0x650 <__fp_inf>
 70e:	0c 94 2e 03 	jmp	0x65c	; 0x65c <__fp_nan>
 712:	11 24       	eor	r1, r1
 714:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <__fp_szero>

00000718 <__mulsf3x>:
 718:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__fp_split3>
 71c:	70 f3       	brcs	.-36     	; 0x6fa <__mulsf3+0x8>

0000071e <__mulsf3_pse>:
 71e:	95 9f       	mul	r25, r21
 720:	c1 f3       	breq	.-16     	; 0x712 <__mulsf3+0x20>
 722:	95 0f       	add	r25, r21
 724:	50 e0       	ldi	r21, 0x00	; 0
 726:	55 1f       	adc	r21, r21
 728:	62 9f       	mul	r22, r18
 72a:	f0 01       	movw	r30, r0
 72c:	72 9f       	mul	r23, r18
 72e:	bb 27       	eor	r27, r27
 730:	f0 0d       	add	r31, r0
 732:	b1 1d       	adc	r27, r1
 734:	63 9f       	mul	r22, r19
 736:	aa 27       	eor	r26, r26
 738:	f0 0d       	add	r31, r0
 73a:	b1 1d       	adc	r27, r1
 73c:	aa 1f       	adc	r26, r26
 73e:	64 9f       	mul	r22, r20
 740:	66 27       	eor	r22, r22
 742:	b0 0d       	add	r27, r0
 744:	a1 1d       	adc	r26, r1
 746:	66 1f       	adc	r22, r22
 748:	82 9f       	mul	r24, r18
 74a:	22 27       	eor	r18, r18
 74c:	b0 0d       	add	r27, r0
 74e:	a1 1d       	adc	r26, r1
 750:	62 1f       	adc	r22, r18
 752:	73 9f       	mul	r23, r19
 754:	b0 0d       	add	r27, r0
 756:	a1 1d       	adc	r26, r1
 758:	62 1f       	adc	r22, r18
 75a:	83 9f       	mul	r24, r19
 75c:	a0 0d       	add	r26, r0
 75e:	61 1d       	adc	r22, r1
 760:	22 1f       	adc	r18, r18
 762:	74 9f       	mul	r23, r20
 764:	33 27       	eor	r19, r19
 766:	a0 0d       	add	r26, r0
 768:	61 1d       	adc	r22, r1
 76a:	23 1f       	adc	r18, r19
 76c:	84 9f       	mul	r24, r20
 76e:	60 0d       	add	r22, r0
 770:	21 1d       	adc	r18, r1
 772:	82 2f       	mov	r24, r18
 774:	76 2f       	mov	r23, r22
 776:	6a 2f       	mov	r22, r26
 778:	11 24       	eor	r1, r1
 77a:	9f 57       	subi	r25, 0x7F	; 127
 77c:	50 40       	sbci	r21, 0x00	; 0
 77e:	9a f0       	brmi	.+38     	; 0x7a6 <__mulsf3_pse+0x88>
 780:	f1 f0       	breq	.+60     	; 0x7be <__mulsf3_pse+0xa0>
 782:	88 23       	and	r24, r24
 784:	4a f0       	brmi	.+18     	; 0x798 <__mulsf3_pse+0x7a>
 786:	ee 0f       	add	r30, r30
 788:	ff 1f       	adc	r31, r31
 78a:	bb 1f       	adc	r27, r27
 78c:	66 1f       	adc	r22, r22
 78e:	77 1f       	adc	r23, r23
 790:	88 1f       	adc	r24, r24
 792:	91 50       	subi	r25, 0x01	; 1
 794:	50 40       	sbci	r21, 0x00	; 0
 796:	a9 f7       	brne	.-22     	; 0x782 <__mulsf3_pse+0x64>
 798:	9e 3f       	cpi	r25, 0xFE	; 254
 79a:	51 05       	cpc	r21, r1
 79c:	80 f0       	brcs	.+32     	; 0x7be <__mulsf3_pse+0xa0>
 79e:	0c 94 28 03 	jmp	0x650	; 0x650 <__fp_inf>
 7a2:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <__fp_szero>
 7a6:	5f 3f       	cpi	r21, 0xFF	; 255
 7a8:	e4 f3       	brlt	.-8      	; 0x7a2 <__mulsf3_pse+0x84>
 7aa:	98 3e       	cpi	r25, 0xE8	; 232
 7ac:	d4 f3       	brlt	.-12     	; 0x7a2 <__mulsf3_pse+0x84>
 7ae:	86 95       	lsr	r24
 7b0:	77 95       	ror	r23
 7b2:	67 95       	ror	r22
 7b4:	b7 95       	ror	r27
 7b6:	f7 95       	ror	r31
 7b8:	e7 95       	ror	r30
 7ba:	9f 5f       	subi	r25, 0xFF	; 255
 7bc:	c1 f7       	brne	.-16     	; 0x7ae <__mulsf3_pse+0x90>
 7be:	fe 2b       	or	r31, r30
 7c0:	88 0f       	add	r24, r24
 7c2:	91 1d       	adc	r25, r1
 7c4:	96 95       	lsr	r25
 7c6:	87 95       	ror	r24
 7c8:	97 f9       	bld	r25, 7
 7ca:	08 95       	ret

000007cc <__udivmodsi4>:
 7cc:	a1 e2       	ldi	r26, 0x21	; 33
 7ce:	1a 2e       	mov	r1, r26
 7d0:	aa 1b       	sub	r26, r26
 7d2:	bb 1b       	sub	r27, r27
 7d4:	fd 01       	movw	r30, r26
 7d6:	0d c0       	rjmp	.+26     	; 0x7f2 <__udivmodsi4_ep>

000007d8 <__udivmodsi4_loop>:
 7d8:	aa 1f       	adc	r26, r26
 7da:	bb 1f       	adc	r27, r27
 7dc:	ee 1f       	adc	r30, r30
 7de:	ff 1f       	adc	r31, r31
 7e0:	a2 17       	cp	r26, r18
 7e2:	b3 07       	cpc	r27, r19
 7e4:	e4 07       	cpc	r30, r20
 7e6:	f5 07       	cpc	r31, r21
 7e8:	20 f0       	brcs	.+8      	; 0x7f2 <__udivmodsi4_ep>
 7ea:	a2 1b       	sub	r26, r18
 7ec:	b3 0b       	sbc	r27, r19
 7ee:	e4 0b       	sbc	r30, r20
 7f0:	f5 0b       	sbc	r31, r21

000007f2 <__udivmodsi4_ep>:
 7f2:	66 1f       	adc	r22, r22
 7f4:	77 1f       	adc	r23, r23
 7f6:	88 1f       	adc	r24, r24
 7f8:	99 1f       	adc	r25, r25
 7fa:	1a 94       	dec	r1
 7fc:	69 f7       	brne	.-38     	; 0x7d8 <__udivmodsi4_loop>
 7fe:	60 95       	com	r22
 800:	70 95       	com	r23
 802:	80 95       	com	r24
 804:	90 95       	com	r25
 806:	9b 01       	movw	r18, r22
 808:	ac 01       	movw	r20, r24
 80a:	bd 01       	movw	r22, r26
 80c:	cf 01       	movw	r24, r30
 80e:	08 95       	ret

00000810 <_exit>:
 810:	f8 94       	cli

00000812 <__stop_program>:
 812:	ff cf       	rjmp	.-2      	; 0x812 <__stop_program>
