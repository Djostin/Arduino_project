
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000874  00000908  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000874  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  00800102  00800102  0000090a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000090a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000093c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e17  00000000  00000000  00000a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ba  00000000  00000000  0000187b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007aa  00000000  00000000  00002235  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  000029e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a0  00000000  00000000  00002c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005a7  00000000  00000000  000031c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000376f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 32       	cpi	r26, 0x29	; 41
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4a 02 	call	0x494	; 0x494 <main>
  9e:	0c 94 38 04 	jmp	0x870	; 0x870 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.            
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  b0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  b4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
  b8:	89 2b       	or	r24, r25
  ba:	81 f0       	breq	.+32     	; 0xdc <SCH_Add_Task+0x36>
  bc:	e2 e0       	ldi	r30, 0x02	; 2
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
  c4:	82 2f       	mov	r24, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  c6:	e9 01       	movw	r28, r18
  c8:	a7 81       	ldd	r26, Z+7	; 0x07
  ca:	b0 85       	ldd	r27, Z+8	; 0x08
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	37 96       	adiw	r30, 0x07	; 7
  d2:	ab 2b       	or	r26, r27
  d4:	b9 f7       	brne	.-18     	; 0xc4 <SCH_Add_Task+0x1e>
   {
      Index++;
   }

   // Have we reached the end of the list?   
   if(Index == SCH_MAX_TASKS)
  d6:	85 30       	cpi	r24, 0x05	; 5
  d8:	21 f4       	brne	.+8      	; 0xe2 <SCH_Add_Task+0x3c>
  da:	15 c0       	rjmp	.+42     	; 0x106 <SCH_Add_Task+0x60>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
  e0:	80 e0       	ldi	r24, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;  
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
  e2:	fe 01       	movw	r30, r28
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ec 1b       	sub	r30, r28
  f2:	fd 0b       	sbc	r31, r29
  f4:	ee 5f       	subi	r30, 0xFE	; 254
  f6:	fe 4f       	sbci	r31, 0xFE	; 254
  f8:	11 83       	std	Z+1, r17	; 0x01
  fa:	00 83       	st	Z, r16
   SCH_tasks_G[Index].Delay =DELAY;
  fc:	73 83       	std	Z+3, r23	; 0x03
  fe:	62 83       	std	Z+2, r22	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
 100:	55 83       	std	Z+5, r21	; 0x05
 102:	44 83       	std	Z+4, r20	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
 104:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
 110:	27 e0       	ldi	r18, 0x07	; 7
 112:	82 9f       	mul	r24, r18
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	fc 01       	movw	r30, r24
 11a:	ee 5f       	subi	r30, 0xFE	; 254
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
 122:	13 82       	std	Z+3, r1	; 0x03
 124:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
 126:	15 82       	std	Z+5, r1	; 0x05
 128:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
 12a:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret

00000130 <SCH_Dispatch_Tasks>:
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	c2 e0       	ldi	r28, 0x02	; 2
 13c:	d1 e0       	ldi	r29, 0x01	; 1
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 13e:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
 140:	8e 81       	ldd	r24, Y+6	; 0x06
 142:	88 23       	and	r24, r24
 144:	79 f0       	breq	.+30     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 146:	e8 81       	ld	r30, Y
 148:	f9 81       	ldd	r31, Y+1	; 0x01
 14a:	30 97       	sbiw	r30, 0x00	; 0
 14c:	59 f0       	breq	.+22     	; 0x164 <SCH_Dispatch_Tasks+0x34>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
 14e:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	81 50       	subi	r24, 0x01	; 1
 154:	8e 83       	std	Y+6, r24	; 0x06

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	89 2b       	or	r24, r25
 15c:	19 f4       	brne	.+6      	; 0x164 <SCH_Dispatch_Tasks+0x34>
         {
            SCH_Delete_Task(Index);
 15e:	81 2f       	mov	r24, r17
 160:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 164:	1f 5f       	subi	r17, 0xFF	; 255
 166:	27 96       	adiw	r28, 0x07	; 7
 168:	15 30       	cpi	r17, 0x05	; 5
 16a:	51 f7       	brne	.-44     	; 0x140 <SCH_Dispatch_Tasks+0x10>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <SCH_Init_T1>:
  You must call this function before using the scheduler.  

-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
 178:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 17a:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	c5 30       	cpi	r28, 0x05	; 5
 186:	d1 f7       	brne	.-12     	; 0x17c <SCH_Init_T1+0x4>

   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR1A = (uint16_t)625;   		     // 10ms = (256/16.000.000) * 625
 188:	81 e7       	ldi	r24, 0x71	; 113
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 190:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
   TCCR1B = (1 << CS12) | (1 << WGM12);  // prescale op 64, top counter = value OCR1A (CTC mode)
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
   TIMSK1 = 1 << OCIE1A;   		     // Timer 1 Output Compare A Match Interrupt Enable
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
}
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <SCH_Start>:
 
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
 1a4:	78 94       	sei
 1a6:	08 95       	ret

000001a8 <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
 1c2:	e2 e0       	ldi	r30, 0x02	; 2
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	25 e2       	ldi	r18, 0x25	; 37
 1c8:	31 e0       	ldi	r19, 0x01	; 1
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	89 2b       	or	r24, r25
 1d0:	91 f0       	breq	.+36     	; 0x1f6 <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	93 81       	ldd	r25, Z+3	; 0x03
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
 1da:	86 81       	ldd	r24, Z+6	; 0x06
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
 1e0:	84 81       	ldd	r24, Z+4	; 0x04
 1e2:	95 81       	ldd	r25, Z+5	; 0x05
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	93 83       	std	Z+3, r25	; 0x03
 1ec:	82 83       	std	Z+2, r24	; 0x02
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	93 83       	std	Z+3, r25	; 0x03
 1f4:	82 83       	std	Z+2, r24	; 0x02
 1f6:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 1f8:	e2 17       	cp	r30, r18
 1fa:	f3 07       	cpc	r31, r19
 1fc:	31 f7       	brne	.-52     	; 0x1ca <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <USART_init>:
int temp();

// initiliseren van functies

void setup(void){
	DDRC = 0x00;
 218:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 21c:	83 e3       	ldi	r24, 0x33	; 51
 21e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 222:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 226:	88 e1       	ldi	r24, 0x18	; 24
 228:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 22c:	86 e0       	ldi	r24, 0x06	; 6
 22e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 232:	08 95       	ret

00000234 <led_init>:
 234:	20 9a       	sbi	0x04, 0	; 4
 236:	21 9a       	sbi	0x04, 1	; 4
 238:	22 9a       	sbi	0x04, 2	; 4
 23a:	08 95       	ret

0000023c <send>:
 23c:	e0 ec       	ldi	r30, 0xC0	; 192
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	90 81       	ld	r25, Z
 242:	95 ff       	sbrs	r25, 5
 244:	fd cf       	rjmp	.-6      	; 0x240 <send+0x4>
 246:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 24a:	08 95       	ret

0000024c <USART_putstring>:
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	ec 01       	movw	r28, r24
 252:	88 81       	ld	r24, Y
 254:	88 23       	and	r24, r24
 256:	31 f0       	breq	.+12     	; 0x264 <USART_putstring+0x18>
 258:	21 96       	adiw	r28, 0x01	; 1
 25a:	0e 94 1e 01 	call	0x23c	; 0x23c <send>
 25e:	89 91       	ld	r24, Y+
 260:	81 11       	cpse	r24, r1
 262:	fb cf       	rjmp	.-10     	; 0x25a <USART_putstring+0xe>
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <UU_PutNumber>:
 26a:	8f 92       	push	r8
 26c:	9f 92       	push	r9
 26e:	af 92       	push	r10
 270:	bf 92       	push	r11
 272:	ef 92       	push	r14
 274:	ff 92       	push	r15
 276:	0f 93       	push	r16
 278:	1f 93       	push	r17
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
 282:	2a 97       	sbiw	r28, 0x0a	; 10
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	f8 94       	cli
 288:	de bf       	out	0x3e, r29	; 62
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	cd bf       	out	0x3d, r28	; 61
 28e:	9e 01       	movw	r18, r28
 290:	2f 5f       	subi	r18, 0xFF	; 255
 292:	3f 4f       	sbci	r19, 0xFF	; 255
 294:	79 01       	movw	r14, r18
 296:	00 e0       	ldi	r16, 0x00	; 0
 298:	10 e0       	ldi	r17, 0x00	; 0
 29a:	0f 2e       	mov	r0, r31
 29c:	fa e0       	ldi	r31, 0x0A	; 10
 29e:	8f 2e       	mov	r8, r31
 2a0:	91 2c       	mov	r9, r1
 2a2:	a1 2c       	mov	r10, r1
 2a4:	b1 2c       	mov	r11, r1
 2a6:	f0 2d       	mov	r31, r0
 2a8:	0f 5f       	subi	r16, 0xFF	; 255
 2aa:	1f 4f       	sbci	r17, 0xFF	; 255
 2ac:	a5 01       	movw	r20, r10
 2ae:	94 01       	movw	r18, r8
 2b0:	0e 94 16 04 	call	0x82c	; 0x82c <__udivmodsi4>
 2b4:	60 5d       	subi	r22, 0xD0	; 208
 2b6:	f7 01       	movw	r30, r14
 2b8:	61 93       	st	Z+, r22
 2ba:	7f 01       	movw	r14, r30
 2bc:	62 2f       	mov	r22, r18
 2be:	73 2f       	mov	r23, r19
 2c0:	84 2f       	mov	r24, r20
 2c2:	95 2f       	mov	r25, r21
 2c4:	61 15       	cp	r22, r1
 2c6:	71 05       	cpc	r23, r1
 2c8:	81 05       	cpc	r24, r1
 2ca:	91 05       	cpc	r25, r1
 2cc:	69 f7       	brne	.-38     	; 0x2a8 <UU_PutNumber+0x3e>
 2ce:	01 15       	cp	r16, r1
 2d0:	11 05       	cpc	r17, r1
 2d2:	89 f0       	breq	.+34     	; 0x2f6 <UU_PutNumber+0x8c>
 2d4:	ee 24       	eor	r14, r14
 2d6:	e3 94       	inc	r14
 2d8:	f1 2c       	mov	r15, r1
 2da:	ec 0e       	add	r14, r28
 2dc:	fd 1e       	adc	r15, r29
 2de:	e0 0e       	add	r14, r16
 2e0:	f1 1e       	adc	r15, r17
 2e2:	01 50       	subi	r16, 0x01	; 1
 2e4:	11 09       	sbc	r17, r1
 2e6:	f7 01       	movw	r30, r14
 2e8:	82 91       	ld	r24, -Z
 2ea:	7f 01       	movw	r14, r30
 2ec:	0e 94 1e 01 	call	0x23c	; 0x23c <send>
 2f0:	01 15       	cp	r16, r1
 2f2:	11 05       	cpc	r17, r1
 2f4:	b1 f7       	brne	.-20     	; 0x2e2 <UU_PutNumber+0x78>
 2f6:	2a 96       	adiw	r28, 0x0a	; 10
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	f8 94       	cli
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	cd bf       	out	0x3d, r28	; 61
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	1f 91       	pop	r17
 308:	0f 91       	pop	r16
 30a:	ff 90       	pop	r15
 30c:	ef 90       	pop	r14
 30e:	bf 90       	pop	r11
 310:	af 90       	pop	r10
 312:	9f 90       	pop	r9
 314:	8f 90       	pop	r8
 316:	08 95       	ret

00000318 <knipperlicht>:
 318:	8a 30       	cpi	r24, 0x0A	; 10
 31a:	c8 f4       	brcc	.+50     	; 0x34e <knipperlicht+0x36>
 31c:	2a 9a       	sbi	0x05, 2	; 5
 31e:	2f ef       	ldi	r18, 0xFF	; 255
 320:	34 e3       	ldi	r19, 0x34	; 52
 322:	9c e0       	ldi	r25, 0x0C	; 12
 324:	21 50       	subi	r18, 0x01	; 1
 326:	30 40       	sbci	r19, 0x00	; 0
 328:	90 40       	sbci	r25, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <knipperlicht+0xc>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <knipperlicht+0x16>
 32e:	00 00       	nop
 330:	95 b1       	in	r25, 0x05	; 5
 332:	93 70       	andi	r25, 0x03	; 3
 334:	95 b9       	out	0x05, r25	; 5
 336:	2f ef       	ldi	r18, 0xFF	; 255
 338:	34 e3       	ldi	r19, 0x34	; 52
 33a:	9c e0       	ldi	r25, 0x0C	; 12
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	30 40       	sbci	r19, 0x00	; 0
 340:	90 40       	sbci	r25, 0x00	; 0
 342:	e1 f7       	brne	.-8      	; 0x33c <knipperlicht+0x24>
 344:	00 c0       	rjmp	.+0      	; 0x346 <knipperlicht+0x2e>
 346:	00 00       	nop
 348:	8f 5f       	subi	r24, 0xFF	; 255
 34a:	8a 30       	cpi	r24, 0x0A	; 10
 34c:	39 f7       	brne	.-50     	; 0x31c <knipperlicht+0x4>
 34e:	08 95       	ret

00000350 <naar_boven>:
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	85 b9       	out	0x05, r24	; 5
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	0e 94 8c 01 	call	0x318	; 0x318 <knipperlicht>
 35a:	08 95       	ret

0000035c <naar_beneden>:
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	85 b9       	out	0x05, r24	; 5
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 8c 01 	call	0x318	; 0x318 <knipperlicht>
 366:	08 95       	ret

00000368 <lichtcheck>:
 368:	8f 36       	cpi	r24, 0x6F	; 111
 36a:	91 05       	cpc	r25, r1
 36c:	19 f4       	brne	.+6      	; 0x374 <lichtcheck+0xc>
 36e:	0e 94 a8 01 	call	0x350	; 0x350 <naar_boven>
 372:	08 95       	ret
 374:	84 36       	cpi	r24, 0x64	; 100
 376:	91 05       	cpc	r25, r1
 378:	19 f4       	brne	.+6      	; 0x380 <lichtcheck+0x18>
 37a:	0e 94 ae 01 	call	0x35c	; 0x35c <naar_beneden>
 37e:	08 95       	ret
 380:	83 37       	cpi	r24, 0x73	; 115
 382:	91 05       	cpc	r25, r1
 384:	09 f4       	brne	.+2      	; 0x388 <lichtcheck+0x20>
 386:	15 b8       	out	0x05, r1	; 5
 388:	08 95       	ret

0000038a <adc_init>:
}

void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
 38a:	80 e4       	ldi	r24, 0x40	; 64
 38c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 390:	87 e8       	ldi	r24, 0x87	; 135
 392:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 396:	08 95       	ret

00000398 <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
 398:	ec e7       	ldi	r30, 0x7C	; 124
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	90 81       	ld	r25, Z
 39e:	98 7f       	andi	r25, 0xF8	; 248
 3a0:	87 70       	andi	r24, 0x07	; 7
 3a2:	89 2b       	or	r24, r25
 3a4:	80 83       	st	Z, r24
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
 3a6:	ea e7       	ldi	r30, 0x7A	; 122
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	80 64       	ori	r24, 0x40	; 64
 3ae:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
 3b0:	80 81       	ld	r24, Z
 3b2:	86 fd       	sbrc	r24, 6
 3b4:	fd cf       	rjmp	.-6      	; 0x3b0 <adc_read+0x18>
	
	return (ADC);
 3b6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 3ba:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 3be:	08 95       	ret

000003c0 <licht_waarde>:

int licht_waarde(){
	int result;
	adc_result0 = adc_read(0);      // read adc value at PA0
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	0e 94 cc 01 	call	0x398	; 0x398 <adc_read>
 3c6:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <adc_result0+0x1>
 3ca:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <adc_result0>
	if (adc_result0 < 150)
 3ce:	86 39       	cpi	r24, 0x96	; 150
 3d0:	91 05       	cpc	r25, r1
 3d2:	88 f0       	brcs	.+34     	; 0x3f6 <licht_waarde+0x36>
	{
		result = 0;
		return result;
	}
	if (adc_result0 >150 && adc_result0 <300)
 3d4:	9c 01       	movw	r18, r24
 3d6:	27 59       	subi	r18, 0x97	; 151
 3d8:	31 09       	sbc	r19, r1
 3da:	25 39       	cpi	r18, 0x95	; 149
 3dc:	31 05       	cpc	r19, r1
 3de:	70 f0       	brcs	.+28     	; 0x3fc <licht_waarde+0x3c>
	{
		result = 1;
		return result;
	}
	if (adc_result0 >300 && adc_result0 <750)
 3e0:	26 59       	subi	r18, 0x96	; 150
 3e2:	31 09       	sbc	r19, r1
 3e4:	21 3c       	cpi	r18, 0xC1	; 193
 3e6:	31 40       	sbci	r19, 0x01	; 1
 3e8:	60 f0       	brcs	.+24     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	{
		result = 2;
		return result;
	}
	if (adc_result0 > 750)
 3ea:	8f 3e       	cpi	r24, 0xEF	; 239
 3ec:	92 40       	sbci	r25, 0x02	; 2
 3ee:	60 f4       	brcc	.+24     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	{
		result = 3;
		return result;
	}
	return result = 100;
 3f0:	84 e6       	ldi	r24, 0x64	; 100
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	08 95       	ret
	int result;
	adc_result0 = adc_read(0);      // read adc value at PA0
	if (adc_result0 < 150)
	{
		result = 0;
		return result;
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	08 95       	ret
	}
	if (adc_result0 >150 && adc_result0 <300)
	{
		result = 1;
		return result;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	08 95       	ret
	}
	if (adc_result0 >300 && adc_result0 <750)
	{
		result = 2;
		return result;
 402:	82 e0       	ldi	r24, 0x02	; 2
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	08 95       	ret
	}
	if (adc_result0 > 750)
	{
		result = 3;
		return result;
 408:	83 e0       	ldi	r24, 0x03	; 3
 40a:	90 e0       	ldi	r25, 0x00	; 0
	}
	return result = 100;
}
 40c:	08 95       	ret

0000040e <temp>:

int temp(){
	adc_result1 = adc_read(1);
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	0e 94 cc 01 	call	0x398	; 0x398 <adc_read>
 414:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <adc_result1+0x1>
 418:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <adc_result1>
	float voltage = adc_result1 * 5.0;
 41c:	bc 01       	movw	r22, r24
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 1b 03 	call	0x636	; 0x636 <__floatunsisf>
 426:	20 e0       	ldi	r18, 0x00	; 0
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	40 ea       	ldi	r20, 0xA0	; 160
 42c:	50 e4       	ldi	r21, 0x40	; 64
 42e:	0e 94 a9 03 	call	0x752	; 0x752 <__mulsf3>
	voltage /= 1024.0;
	float temperatureC = (voltage - 0.5) * 10;
	int temp_int = temperatureC * 100;
	return temp_int;
 432:	20 e0       	ldi	r18, 0x00	; 0
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	40 e8       	ldi	r20, 0x80	; 128
 438:	5a e3       	ldi	r21, 0x3A	; 58
 43a:	0e 94 a9 03 	call	0x752	; 0x752 <__mulsf3>
 43e:	20 e0       	ldi	r18, 0x00	; 0
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	40 e0       	ldi	r20, 0x00	; 0
 444:	5f e3       	ldi	r21, 0x3F	; 63
 446:	0e 94 78 02 	call	0x4f0	; 0x4f0 <__subsf3>
 44a:	20 e0       	ldi	r18, 0x00	; 0
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	40 e2       	ldi	r20, 0x20	; 32
 450:	51 e4       	ldi	r21, 0x41	; 65
 452:	0e 94 a9 03 	call	0x752	; 0x752 <__mulsf3>
 456:	20 e0       	ldi	r18, 0x00	; 0
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	48 ec       	ldi	r20, 0xC8	; 200
 45c:	52 e4       	ldi	r21, 0x42	; 66
 45e:	0e 94 a9 03 	call	0x752	; 0x752 <__mulsf3>
 462:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__fixsfsi>
}
 466:	cb 01       	movw	r24, r22
 468:	08 95       	ret

0000046a <send_data>:


void send_data(void){
	USART_putstring("x");
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	91 e0       	ldi	r25, 0x01	; 1
 46e:	0e 94 26 01 	call	0x24c	; 0x24c <USART_putstring>
	UU_PutNumber(licht_waarde());
 472:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <licht_waarde>
 476:	bc 01       	movw	r22, r24
 478:	99 0f       	add	r25, r25
 47a:	88 0b       	sbc	r24, r24
 47c:	99 0b       	sbc	r25, r25
 47e:	0e 94 35 01 	call	0x26a	; 0x26a <UU_PutNumber>
	UU_PutNumber(temp());
 482:	0e 94 07 02 	call	0x40e	; 0x40e <temp>
 486:	bc 01       	movw	r22, r24
 488:	99 0f       	add	r25, r25
 48a:	88 0b       	sbc	r24, r24
 48c:	99 0b       	sbc	r25, r25
 48e:	0e 94 35 01 	call	0x26a	; 0x26a <UU_PutNumber>
 492:	08 95       	ret

00000494 <main>:
int temp();

// initiliseren van functies

void setup(void){
	DDRC = 0x00;
 494:	17 b8       	out	0x07, r1	; 7
}

int main()
{
	setup();
	led_init();
 496:	0e 94 1a 01 	call	0x234	; 0x234 <led_init>
	adc_init();
 49a:	0e 94 c5 01 	call	0x38a	; 0x38a <adc_init>
	USART_init();
 49e:	0e 94 0c 01 	call	0x218	; 0x218 <USART_init>
	
	SCH_Init_T1();
 4a2:	0e 94 bc 00 	call	0x178	; 0x178 <SCH_Init_T1>
	SCH_Add_Task(lichtcheck,0,10);
 4a6:	4a e0       	ldi	r20, 0x0A	; 10
 4a8:	50 e0       	ldi	r21, 0x00	; 0
 4aa:	60 e0       	ldi	r22, 0x00	; 0
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	84 eb       	ldi	r24, 0xB4	; 180
 4b0:	91 e0       	ldi	r25, 0x01	; 1
 4b2:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(temp,0,400);
 4b6:	40 e9       	ldi	r20, 0x90	; 144
 4b8:	51 e0       	ldi	r21, 0x01	; 1
 4ba:	60 e0       	ldi	r22, 0x00	; 0
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	87 e0       	ldi	r24, 0x07	; 7
 4c0:	92 e0       	ldi	r25, 0x02	; 2
 4c2:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(licht_waarde,0,300);
 4c6:	4c e2       	ldi	r20, 0x2C	; 44
 4c8:	51 e0       	ldi	r21, 0x01	; 1
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	70 e0       	ldi	r23, 0x00	; 0
 4ce:	80 ee       	ldi	r24, 0xE0	; 224
 4d0:	91 e0       	ldi	r25, 0x01	; 1
 4d2:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(send_data,0,600);
 4d6:	48 e5       	ldi	r20, 0x58	; 88
 4d8:	52 e0       	ldi	r21, 0x02	; 2
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	70 e0       	ldi	r23, 0x00	; 0
 4de:	85 e3       	ldi	r24, 0x35	; 53
 4e0:	92 e0       	ldi	r25, 0x02	; 2
 4e2:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	
	
	SCH_Start();
 4e6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SCH_Start>
	while(1){
		SCH_Dispatch_Tasks();
 4ea:	0e 94 98 00 	call	0x130	; 0x130 <SCH_Dispatch_Tasks>
 4ee:	fd cf       	rjmp	.-6      	; 0x4ea <main+0x56>

000004f0 <__subsf3>:
 4f0:	50 58       	subi	r21, 0x80	; 128

000004f2 <__addsf3>:
 4f2:	bb 27       	eor	r27, r27
 4f4:	aa 27       	eor	r26, r26
 4f6:	0e 94 90 02 	call	0x520	; 0x520 <__addsf3x>
 4fa:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__fp_round>
 4fe:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__fp_pscA>
 502:	38 f0       	brcs	.+14     	; 0x512 <__addsf3+0x20>
 504:	0e 94 68 03 	call	0x6d0	; 0x6d0 <__fp_pscB>
 508:	20 f0       	brcs	.+8      	; 0x512 <__addsf3+0x20>
 50a:	39 f4       	brne	.+14     	; 0x51a <__addsf3+0x28>
 50c:	9f 3f       	cpi	r25, 0xFF	; 255
 50e:	19 f4       	brne	.+6      	; 0x516 <__addsf3+0x24>
 510:	26 f4       	brtc	.+8      	; 0x51a <__addsf3+0x28>
 512:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__fp_nan>
 516:	0e f4       	brtc	.+2      	; 0x51a <__addsf3+0x28>
 518:	e0 95       	com	r30
 51a:	e7 fb       	bst	r30, 7
 51c:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_inf>

00000520 <__addsf3x>:
 520:	e9 2f       	mov	r30, r25
 522:	0e 94 80 03 	call	0x700	; 0x700 <__fp_split3>
 526:	58 f3       	brcs	.-42     	; 0x4fe <__addsf3+0xc>
 528:	ba 17       	cp	r27, r26
 52a:	62 07       	cpc	r22, r18
 52c:	73 07       	cpc	r23, r19
 52e:	84 07       	cpc	r24, r20
 530:	95 07       	cpc	r25, r21
 532:	20 f0       	brcs	.+8      	; 0x53c <__addsf3x+0x1c>
 534:	79 f4       	brne	.+30     	; 0x554 <__addsf3x+0x34>
 536:	a6 f5       	brtc	.+104    	; 0x5a0 <__addsf3x+0x80>
 538:	0c 94 a2 03 	jmp	0x744	; 0x744 <__fp_zero>
 53c:	0e f4       	brtc	.+2      	; 0x540 <__addsf3x+0x20>
 53e:	e0 95       	com	r30
 540:	0b 2e       	mov	r0, r27
 542:	ba 2f       	mov	r27, r26
 544:	a0 2d       	mov	r26, r0
 546:	0b 01       	movw	r0, r22
 548:	b9 01       	movw	r22, r18
 54a:	90 01       	movw	r18, r0
 54c:	0c 01       	movw	r0, r24
 54e:	ca 01       	movw	r24, r20
 550:	a0 01       	movw	r20, r0
 552:	11 24       	eor	r1, r1
 554:	ff 27       	eor	r31, r31
 556:	59 1b       	sub	r21, r25
 558:	99 f0       	breq	.+38     	; 0x580 <__addsf3x+0x60>
 55a:	59 3f       	cpi	r21, 0xF9	; 249
 55c:	50 f4       	brcc	.+20     	; 0x572 <__addsf3x+0x52>
 55e:	50 3e       	cpi	r21, 0xE0	; 224
 560:	68 f1       	brcs	.+90     	; 0x5bc <__addsf3x+0x9c>
 562:	1a 16       	cp	r1, r26
 564:	f0 40       	sbci	r31, 0x00	; 0
 566:	a2 2f       	mov	r26, r18
 568:	23 2f       	mov	r18, r19
 56a:	34 2f       	mov	r19, r20
 56c:	44 27       	eor	r20, r20
 56e:	58 5f       	subi	r21, 0xF8	; 248
 570:	f3 cf       	rjmp	.-26     	; 0x558 <__addsf3x+0x38>
 572:	46 95       	lsr	r20
 574:	37 95       	ror	r19
 576:	27 95       	ror	r18
 578:	a7 95       	ror	r26
 57a:	f0 40       	sbci	r31, 0x00	; 0
 57c:	53 95       	inc	r21
 57e:	c9 f7       	brne	.-14     	; 0x572 <__addsf3x+0x52>
 580:	7e f4       	brtc	.+30     	; 0x5a0 <__addsf3x+0x80>
 582:	1f 16       	cp	r1, r31
 584:	ba 0b       	sbc	r27, r26
 586:	62 0b       	sbc	r22, r18
 588:	73 0b       	sbc	r23, r19
 58a:	84 0b       	sbc	r24, r20
 58c:	ba f0       	brmi	.+46     	; 0x5bc <__addsf3x+0x9c>
 58e:	91 50       	subi	r25, 0x01	; 1
 590:	a1 f0       	breq	.+40     	; 0x5ba <__addsf3x+0x9a>
 592:	ff 0f       	add	r31, r31
 594:	bb 1f       	adc	r27, r27
 596:	66 1f       	adc	r22, r22
 598:	77 1f       	adc	r23, r23
 59a:	88 1f       	adc	r24, r24
 59c:	c2 f7       	brpl	.-16     	; 0x58e <__addsf3x+0x6e>
 59e:	0e c0       	rjmp	.+28     	; 0x5bc <__addsf3x+0x9c>
 5a0:	ba 0f       	add	r27, r26
 5a2:	62 1f       	adc	r22, r18
 5a4:	73 1f       	adc	r23, r19
 5a6:	84 1f       	adc	r24, r20
 5a8:	48 f4       	brcc	.+18     	; 0x5bc <__addsf3x+0x9c>
 5aa:	87 95       	ror	r24
 5ac:	77 95       	ror	r23
 5ae:	67 95       	ror	r22
 5b0:	b7 95       	ror	r27
 5b2:	f7 95       	ror	r31
 5b4:	9e 3f       	cpi	r25, 0xFE	; 254
 5b6:	08 f0       	brcs	.+2      	; 0x5ba <__addsf3x+0x9a>
 5b8:	b0 cf       	rjmp	.-160    	; 0x51a <__addsf3+0x28>
 5ba:	93 95       	inc	r25
 5bc:	88 0f       	add	r24, r24
 5be:	08 f0       	brcs	.+2      	; 0x5c2 <__addsf3x+0xa2>
 5c0:	99 27       	eor	r25, r25
 5c2:	ee 0f       	add	r30, r30
 5c4:	97 95       	ror	r25
 5c6:	87 95       	ror	r24
 5c8:	08 95       	ret

000005ca <__fixsfsi>:
 5ca:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__fixunssfsi>
 5ce:	68 94       	set
 5d0:	b1 11       	cpse	r27, r1
 5d2:	0c 94 a3 03 	jmp	0x746	; 0x746 <__fp_szero>
 5d6:	08 95       	ret

000005d8 <__fixunssfsi>:
 5d8:	0e 94 88 03 	call	0x710	; 0x710 <__fp_splitA>
 5dc:	88 f0       	brcs	.+34     	; 0x600 <__fixunssfsi+0x28>
 5de:	9f 57       	subi	r25, 0x7F	; 127
 5e0:	98 f0       	brcs	.+38     	; 0x608 <__fixunssfsi+0x30>
 5e2:	b9 2f       	mov	r27, r25
 5e4:	99 27       	eor	r25, r25
 5e6:	b7 51       	subi	r27, 0x17	; 23
 5e8:	b0 f0       	brcs	.+44     	; 0x616 <__fixunssfsi+0x3e>
 5ea:	e1 f0       	breq	.+56     	; 0x624 <__fixunssfsi+0x4c>
 5ec:	66 0f       	add	r22, r22
 5ee:	77 1f       	adc	r23, r23
 5f0:	88 1f       	adc	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	1a f0       	brmi	.+6      	; 0x5fc <__fixunssfsi+0x24>
 5f6:	ba 95       	dec	r27
 5f8:	c9 f7       	brne	.-14     	; 0x5ec <__fixunssfsi+0x14>
 5fa:	14 c0       	rjmp	.+40     	; 0x624 <__fixunssfsi+0x4c>
 5fc:	b1 30       	cpi	r27, 0x01	; 1
 5fe:	91 f0       	breq	.+36     	; 0x624 <__fixunssfsi+0x4c>
 600:	0e 94 a2 03 	call	0x744	; 0x744 <__fp_zero>
 604:	b1 e0       	ldi	r27, 0x01	; 1
 606:	08 95       	ret
 608:	0c 94 a2 03 	jmp	0x744	; 0x744 <__fp_zero>
 60c:	67 2f       	mov	r22, r23
 60e:	78 2f       	mov	r23, r24
 610:	88 27       	eor	r24, r24
 612:	b8 5f       	subi	r27, 0xF8	; 248
 614:	39 f0       	breq	.+14     	; 0x624 <__fixunssfsi+0x4c>
 616:	b9 3f       	cpi	r27, 0xF9	; 249
 618:	cc f3       	brlt	.-14     	; 0x60c <__fixunssfsi+0x34>
 61a:	86 95       	lsr	r24
 61c:	77 95       	ror	r23
 61e:	67 95       	ror	r22
 620:	b3 95       	inc	r27
 622:	d9 f7       	brne	.-10     	; 0x61a <__fixunssfsi+0x42>
 624:	3e f4       	brtc	.+14     	; 0x634 <__fixunssfsi+0x5c>
 626:	90 95       	com	r25
 628:	80 95       	com	r24
 62a:	70 95       	com	r23
 62c:	61 95       	neg	r22
 62e:	7f 4f       	sbci	r23, 0xFF	; 255
 630:	8f 4f       	sbci	r24, 0xFF	; 255
 632:	9f 4f       	sbci	r25, 0xFF	; 255
 634:	08 95       	ret

00000636 <__floatunsisf>:
 636:	e8 94       	clt
 638:	09 c0       	rjmp	.+18     	; 0x64c <__floatsisf+0x12>

0000063a <__floatsisf>:
 63a:	97 fb       	bst	r25, 7
 63c:	3e f4       	brtc	.+14     	; 0x64c <__floatsisf+0x12>
 63e:	90 95       	com	r25
 640:	80 95       	com	r24
 642:	70 95       	com	r23
 644:	61 95       	neg	r22
 646:	7f 4f       	sbci	r23, 0xFF	; 255
 648:	8f 4f       	sbci	r24, 0xFF	; 255
 64a:	9f 4f       	sbci	r25, 0xFF	; 255
 64c:	99 23       	and	r25, r25
 64e:	a9 f0       	breq	.+42     	; 0x67a <__floatsisf+0x40>
 650:	f9 2f       	mov	r31, r25
 652:	96 e9       	ldi	r25, 0x96	; 150
 654:	bb 27       	eor	r27, r27
 656:	93 95       	inc	r25
 658:	f6 95       	lsr	r31
 65a:	87 95       	ror	r24
 65c:	77 95       	ror	r23
 65e:	67 95       	ror	r22
 660:	b7 95       	ror	r27
 662:	f1 11       	cpse	r31, r1
 664:	f8 cf       	rjmp	.-16     	; 0x656 <__floatsisf+0x1c>
 666:	fa f4       	brpl	.+62     	; 0x6a6 <__floatsisf+0x6c>
 668:	bb 0f       	add	r27, r27
 66a:	11 f4       	brne	.+4      	; 0x670 <__floatsisf+0x36>
 66c:	60 ff       	sbrs	r22, 0
 66e:	1b c0       	rjmp	.+54     	; 0x6a6 <__floatsisf+0x6c>
 670:	6f 5f       	subi	r22, 0xFF	; 255
 672:	7f 4f       	sbci	r23, 0xFF	; 255
 674:	8f 4f       	sbci	r24, 0xFF	; 255
 676:	9f 4f       	sbci	r25, 0xFF	; 255
 678:	16 c0       	rjmp	.+44     	; 0x6a6 <__floatsisf+0x6c>
 67a:	88 23       	and	r24, r24
 67c:	11 f0       	breq	.+4      	; 0x682 <__floatsisf+0x48>
 67e:	96 e9       	ldi	r25, 0x96	; 150
 680:	11 c0       	rjmp	.+34     	; 0x6a4 <__floatsisf+0x6a>
 682:	77 23       	and	r23, r23
 684:	21 f0       	breq	.+8      	; 0x68e <__floatsisf+0x54>
 686:	9e e8       	ldi	r25, 0x8E	; 142
 688:	87 2f       	mov	r24, r23
 68a:	76 2f       	mov	r23, r22
 68c:	05 c0       	rjmp	.+10     	; 0x698 <__floatsisf+0x5e>
 68e:	66 23       	and	r22, r22
 690:	71 f0       	breq	.+28     	; 0x6ae <__floatsisf+0x74>
 692:	96 e8       	ldi	r25, 0x86	; 134
 694:	86 2f       	mov	r24, r22
 696:	70 e0       	ldi	r23, 0x00	; 0
 698:	60 e0       	ldi	r22, 0x00	; 0
 69a:	2a f0       	brmi	.+10     	; 0x6a6 <__floatsisf+0x6c>
 69c:	9a 95       	dec	r25
 69e:	66 0f       	add	r22, r22
 6a0:	77 1f       	adc	r23, r23
 6a2:	88 1f       	adc	r24, r24
 6a4:	da f7       	brpl	.-10     	; 0x69c <__floatsisf+0x62>
 6a6:	88 0f       	add	r24, r24
 6a8:	96 95       	lsr	r25
 6aa:	87 95       	ror	r24
 6ac:	97 f9       	bld	r25, 7
 6ae:	08 95       	ret

000006b0 <__fp_inf>:
 6b0:	97 f9       	bld	r25, 7
 6b2:	9f 67       	ori	r25, 0x7F	; 127
 6b4:	80 e8       	ldi	r24, 0x80	; 128
 6b6:	70 e0       	ldi	r23, 0x00	; 0
 6b8:	60 e0       	ldi	r22, 0x00	; 0
 6ba:	08 95       	ret

000006bc <__fp_nan>:
 6bc:	9f ef       	ldi	r25, 0xFF	; 255
 6be:	80 ec       	ldi	r24, 0xC0	; 192
 6c0:	08 95       	ret

000006c2 <__fp_pscA>:
 6c2:	00 24       	eor	r0, r0
 6c4:	0a 94       	dec	r0
 6c6:	16 16       	cp	r1, r22
 6c8:	17 06       	cpc	r1, r23
 6ca:	18 06       	cpc	r1, r24
 6cc:	09 06       	cpc	r0, r25
 6ce:	08 95       	ret

000006d0 <__fp_pscB>:
 6d0:	00 24       	eor	r0, r0
 6d2:	0a 94       	dec	r0
 6d4:	12 16       	cp	r1, r18
 6d6:	13 06       	cpc	r1, r19
 6d8:	14 06       	cpc	r1, r20
 6da:	05 06       	cpc	r0, r21
 6dc:	08 95       	ret

000006de <__fp_round>:
 6de:	09 2e       	mov	r0, r25
 6e0:	03 94       	inc	r0
 6e2:	00 0c       	add	r0, r0
 6e4:	11 f4       	brne	.+4      	; 0x6ea <__fp_round+0xc>
 6e6:	88 23       	and	r24, r24
 6e8:	52 f0       	brmi	.+20     	; 0x6fe <__fp_round+0x20>
 6ea:	bb 0f       	add	r27, r27
 6ec:	40 f4       	brcc	.+16     	; 0x6fe <__fp_round+0x20>
 6ee:	bf 2b       	or	r27, r31
 6f0:	11 f4       	brne	.+4      	; 0x6f6 <__fp_round+0x18>
 6f2:	60 ff       	sbrs	r22, 0
 6f4:	04 c0       	rjmp	.+8      	; 0x6fe <__fp_round+0x20>
 6f6:	6f 5f       	subi	r22, 0xFF	; 255
 6f8:	7f 4f       	sbci	r23, 0xFF	; 255
 6fa:	8f 4f       	sbci	r24, 0xFF	; 255
 6fc:	9f 4f       	sbci	r25, 0xFF	; 255
 6fe:	08 95       	ret

00000700 <__fp_split3>:
 700:	57 fd       	sbrc	r21, 7
 702:	90 58       	subi	r25, 0x80	; 128
 704:	44 0f       	add	r20, r20
 706:	55 1f       	adc	r21, r21
 708:	59 f0       	breq	.+22     	; 0x720 <__fp_splitA+0x10>
 70a:	5f 3f       	cpi	r21, 0xFF	; 255
 70c:	71 f0       	breq	.+28     	; 0x72a <__fp_splitA+0x1a>
 70e:	47 95       	ror	r20

00000710 <__fp_splitA>:
 710:	88 0f       	add	r24, r24
 712:	97 fb       	bst	r25, 7
 714:	99 1f       	adc	r25, r25
 716:	61 f0       	breq	.+24     	; 0x730 <__fp_splitA+0x20>
 718:	9f 3f       	cpi	r25, 0xFF	; 255
 71a:	79 f0       	breq	.+30     	; 0x73a <__fp_splitA+0x2a>
 71c:	87 95       	ror	r24
 71e:	08 95       	ret
 720:	12 16       	cp	r1, r18
 722:	13 06       	cpc	r1, r19
 724:	14 06       	cpc	r1, r20
 726:	55 1f       	adc	r21, r21
 728:	f2 cf       	rjmp	.-28     	; 0x70e <__fp_split3+0xe>
 72a:	46 95       	lsr	r20
 72c:	f1 df       	rcall	.-30     	; 0x710 <__fp_splitA>
 72e:	08 c0       	rjmp	.+16     	; 0x740 <__fp_splitA+0x30>
 730:	16 16       	cp	r1, r22
 732:	17 06       	cpc	r1, r23
 734:	18 06       	cpc	r1, r24
 736:	99 1f       	adc	r25, r25
 738:	f1 cf       	rjmp	.-30     	; 0x71c <__fp_splitA+0xc>
 73a:	86 95       	lsr	r24
 73c:	71 05       	cpc	r23, r1
 73e:	61 05       	cpc	r22, r1
 740:	08 94       	sec
 742:	08 95       	ret

00000744 <__fp_zero>:
 744:	e8 94       	clt

00000746 <__fp_szero>:
 746:	bb 27       	eor	r27, r27
 748:	66 27       	eor	r22, r22
 74a:	77 27       	eor	r23, r23
 74c:	cb 01       	movw	r24, r22
 74e:	97 f9       	bld	r25, 7
 750:	08 95       	ret

00000752 <__mulsf3>:
 752:	0e 94 bc 03 	call	0x778	; 0x778 <__mulsf3x>
 756:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__fp_round>
 75a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__fp_pscA>
 75e:	38 f0       	brcs	.+14     	; 0x76e <__mulsf3+0x1c>
 760:	0e 94 68 03 	call	0x6d0	; 0x6d0 <__fp_pscB>
 764:	20 f0       	brcs	.+8      	; 0x76e <__mulsf3+0x1c>
 766:	95 23       	and	r25, r21
 768:	11 f0       	breq	.+4      	; 0x76e <__mulsf3+0x1c>
 76a:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_inf>
 76e:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__fp_nan>
 772:	11 24       	eor	r1, r1
 774:	0c 94 a3 03 	jmp	0x746	; 0x746 <__fp_szero>

00000778 <__mulsf3x>:
 778:	0e 94 80 03 	call	0x700	; 0x700 <__fp_split3>
 77c:	70 f3       	brcs	.-36     	; 0x75a <__mulsf3+0x8>

0000077e <__mulsf3_pse>:
 77e:	95 9f       	mul	r25, r21
 780:	c1 f3       	breq	.-16     	; 0x772 <__mulsf3+0x20>
 782:	95 0f       	add	r25, r21
 784:	50 e0       	ldi	r21, 0x00	; 0
 786:	55 1f       	adc	r21, r21
 788:	62 9f       	mul	r22, r18
 78a:	f0 01       	movw	r30, r0
 78c:	72 9f       	mul	r23, r18
 78e:	bb 27       	eor	r27, r27
 790:	f0 0d       	add	r31, r0
 792:	b1 1d       	adc	r27, r1
 794:	63 9f       	mul	r22, r19
 796:	aa 27       	eor	r26, r26
 798:	f0 0d       	add	r31, r0
 79a:	b1 1d       	adc	r27, r1
 79c:	aa 1f       	adc	r26, r26
 79e:	64 9f       	mul	r22, r20
 7a0:	66 27       	eor	r22, r22
 7a2:	b0 0d       	add	r27, r0
 7a4:	a1 1d       	adc	r26, r1
 7a6:	66 1f       	adc	r22, r22
 7a8:	82 9f       	mul	r24, r18
 7aa:	22 27       	eor	r18, r18
 7ac:	b0 0d       	add	r27, r0
 7ae:	a1 1d       	adc	r26, r1
 7b0:	62 1f       	adc	r22, r18
 7b2:	73 9f       	mul	r23, r19
 7b4:	b0 0d       	add	r27, r0
 7b6:	a1 1d       	adc	r26, r1
 7b8:	62 1f       	adc	r22, r18
 7ba:	83 9f       	mul	r24, r19
 7bc:	a0 0d       	add	r26, r0
 7be:	61 1d       	adc	r22, r1
 7c0:	22 1f       	adc	r18, r18
 7c2:	74 9f       	mul	r23, r20
 7c4:	33 27       	eor	r19, r19
 7c6:	a0 0d       	add	r26, r0
 7c8:	61 1d       	adc	r22, r1
 7ca:	23 1f       	adc	r18, r19
 7cc:	84 9f       	mul	r24, r20
 7ce:	60 0d       	add	r22, r0
 7d0:	21 1d       	adc	r18, r1
 7d2:	82 2f       	mov	r24, r18
 7d4:	76 2f       	mov	r23, r22
 7d6:	6a 2f       	mov	r22, r26
 7d8:	11 24       	eor	r1, r1
 7da:	9f 57       	subi	r25, 0x7F	; 127
 7dc:	50 40       	sbci	r21, 0x00	; 0
 7de:	9a f0       	brmi	.+38     	; 0x806 <__mulsf3_pse+0x88>
 7e0:	f1 f0       	breq	.+60     	; 0x81e <__mulsf3_pse+0xa0>
 7e2:	88 23       	and	r24, r24
 7e4:	4a f0       	brmi	.+18     	; 0x7f8 <__mulsf3_pse+0x7a>
 7e6:	ee 0f       	add	r30, r30
 7e8:	ff 1f       	adc	r31, r31
 7ea:	bb 1f       	adc	r27, r27
 7ec:	66 1f       	adc	r22, r22
 7ee:	77 1f       	adc	r23, r23
 7f0:	88 1f       	adc	r24, r24
 7f2:	91 50       	subi	r25, 0x01	; 1
 7f4:	50 40       	sbci	r21, 0x00	; 0
 7f6:	a9 f7       	brne	.-22     	; 0x7e2 <__mulsf3_pse+0x64>
 7f8:	9e 3f       	cpi	r25, 0xFE	; 254
 7fa:	51 05       	cpc	r21, r1
 7fc:	80 f0       	brcs	.+32     	; 0x81e <__mulsf3_pse+0xa0>
 7fe:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_inf>
 802:	0c 94 a3 03 	jmp	0x746	; 0x746 <__fp_szero>
 806:	5f 3f       	cpi	r21, 0xFF	; 255
 808:	e4 f3       	brlt	.-8      	; 0x802 <__mulsf3_pse+0x84>
 80a:	98 3e       	cpi	r25, 0xE8	; 232
 80c:	d4 f3       	brlt	.-12     	; 0x802 <__mulsf3_pse+0x84>
 80e:	86 95       	lsr	r24
 810:	77 95       	ror	r23
 812:	67 95       	ror	r22
 814:	b7 95       	ror	r27
 816:	f7 95       	ror	r31
 818:	e7 95       	ror	r30
 81a:	9f 5f       	subi	r25, 0xFF	; 255
 81c:	c1 f7       	brne	.-16     	; 0x80e <__mulsf3_pse+0x90>
 81e:	fe 2b       	or	r31, r30
 820:	88 0f       	add	r24, r24
 822:	91 1d       	adc	r25, r1
 824:	96 95       	lsr	r25
 826:	87 95       	ror	r24
 828:	97 f9       	bld	r25, 7
 82a:	08 95       	ret

0000082c <__udivmodsi4>:
 82c:	a1 e2       	ldi	r26, 0x21	; 33
 82e:	1a 2e       	mov	r1, r26
 830:	aa 1b       	sub	r26, r26
 832:	bb 1b       	sub	r27, r27
 834:	fd 01       	movw	r30, r26
 836:	0d c0       	rjmp	.+26     	; 0x852 <__udivmodsi4_ep>

00000838 <__udivmodsi4_loop>:
 838:	aa 1f       	adc	r26, r26
 83a:	bb 1f       	adc	r27, r27
 83c:	ee 1f       	adc	r30, r30
 83e:	ff 1f       	adc	r31, r31
 840:	a2 17       	cp	r26, r18
 842:	b3 07       	cpc	r27, r19
 844:	e4 07       	cpc	r30, r20
 846:	f5 07       	cpc	r31, r21
 848:	20 f0       	brcs	.+8      	; 0x852 <__udivmodsi4_ep>
 84a:	a2 1b       	sub	r26, r18
 84c:	b3 0b       	sbc	r27, r19
 84e:	e4 0b       	sbc	r30, r20
 850:	f5 0b       	sbc	r31, r21

00000852 <__udivmodsi4_ep>:
 852:	66 1f       	adc	r22, r22
 854:	77 1f       	adc	r23, r23
 856:	88 1f       	adc	r24, r24
 858:	99 1f       	adc	r25, r25
 85a:	1a 94       	dec	r1
 85c:	69 f7       	brne	.-38     	; 0x838 <__udivmodsi4_loop>
 85e:	60 95       	com	r22
 860:	70 95       	com	r23
 862:	80 95       	com	r24
 864:	90 95       	com	r25
 866:	9b 01       	movw	r18, r22
 868:	ac 01       	movw	r20, r24
 86a:	bd 01       	movw	r22, r26
 86c:	cf 01       	movw	r24, r30
 86e:	08 95       	ret

00000870 <_exit>:
 870:	f8 94       	cli

00000872 <__stop_program>:
 872:	ff cf       	rjmp	.-2      	; 0x872 <__stop_program>
