
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000884  00000918  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000884  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  00800102  00800102  0000091a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000091a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000094c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e3a  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c3  00000000  00000000  000018a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000079c  00000000  00000000  00002269  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  00002a08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000595  00000000  00000000  00002c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000553  00000000  00000000  000031d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003728  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e8       	ldi	r30, 0x84	; 132
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 32       	cpi	r26, 0x29	; 41
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <main>
  9e:	0c 94 40 04 	jmp	0x880	; 0x880 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.            
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  b0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  b4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
  b8:	89 2b       	or	r24, r25
  ba:	81 f0       	breq	.+32     	; 0xdc <SCH_Add_Task+0x36>
  bc:	e2 e0       	ldi	r30, 0x02	; 2
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
  c4:	82 2f       	mov	r24, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  c6:	e9 01       	movw	r28, r18
  c8:	a7 81       	ldd	r26, Z+7	; 0x07
  ca:	b0 85       	ldd	r27, Z+8	; 0x08
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	37 96       	adiw	r30, 0x07	; 7
  d2:	ab 2b       	or	r26, r27
  d4:	b9 f7       	brne	.-18     	; 0xc4 <SCH_Add_Task+0x1e>
   {
      Index++;
   }

   // Have we reached the end of the list?   
   if(Index == SCH_MAX_TASKS)
  d6:	85 30       	cpi	r24, 0x05	; 5
  d8:	21 f4       	brne	.+8      	; 0xe2 <SCH_Add_Task+0x3c>
  da:	15 c0       	rjmp	.+42     	; 0x106 <SCH_Add_Task+0x60>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
  e0:	80 e0       	ldi	r24, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;  
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
  e2:	fe 01       	movw	r30, r28
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ec 1b       	sub	r30, r28
  f2:	fd 0b       	sbc	r31, r29
  f4:	ee 5f       	subi	r30, 0xFE	; 254
  f6:	fe 4f       	sbci	r31, 0xFE	; 254
  f8:	11 83       	std	Z+1, r17	; 0x01
  fa:	00 83       	st	Z, r16
   SCH_tasks_G[Index].Delay =DELAY;
  fc:	73 83       	std	Z+3, r23	; 0x03
  fe:	62 83       	std	Z+2, r22	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
 100:	55 83       	std	Z+5, r21	; 0x05
 102:	44 83       	std	Z+4, r20	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
 104:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
 110:	27 e0       	ldi	r18, 0x07	; 7
 112:	82 9f       	mul	r24, r18
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	fc 01       	movw	r30, r24
 11a:	ee 5f       	subi	r30, 0xFE	; 254
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
 122:	13 82       	std	Z+3, r1	; 0x03
 124:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
 126:	15 82       	std	Z+5, r1	; 0x05
 128:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
 12a:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret

00000130 <SCH_Dispatch_Tasks>:
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	c2 e0       	ldi	r28, 0x02	; 2
 13c:	d1 e0       	ldi	r29, 0x01	; 1
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 13e:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
 140:	8e 81       	ldd	r24, Y+6	; 0x06
 142:	88 23       	and	r24, r24
 144:	79 f0       	breq	.+30     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 146:	e8 81       	ld	r30, Y
 148:	f9 81       	ldd	r31, Y+1	; 0x01
 14a:	30 97       	sbiw	r30, 0x00	; 0
 14c:	59 f0       	breq	.+22     	; 0x164 <SCH_Dispatch_Tasks+0x34>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
 14e:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	81 50       	subi	r24, 0x01	; 1
 154:	8e 83       	std	Y+6, r24	; 0x06

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	89 2b       	or	r24, r25
 15c:	19 f4       	brne	.+6      	; 0x164 <SCH_Dispatch_Tasks+0x34>
         {
            SCH_Delete_Task(Index);
 15e:	81 2f       	mov	r24, r17
 160:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 164:	1f 5f       	subi	r17, 0xFF	; 255
 166:	27 96       	adiw	r28, 0x07	; 7
 168:	15 30       	cpi	r17, 0x05	; 5
 16a:	51 f7       	brne	.-44     	; 0x140 <SCH_Dispatch_Tasks+0x10>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <SCH_Init_T1>:
  You must call this function before using the scheduler.  

-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
 178:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 17a:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	c5 30       	cpi	r28, 0x05	; 5
 186:	d1 f7       	brne	.-12     	; 0x17c <SCH_Init_T1+0x4>

   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR1A = (uint16_t)625;   		     // 10ms = (256/16.000.000) * 625
 188:	81 e7       	ldi	r24, 0x71	; 113
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 190:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
   TCCR1B = (1 << CS12) | (1 << WGM12);  // prescale op 64, top counter = value OCR1A (CTC mode)
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
   TIMSK1 = 1 << OCIE1A;   		     // Timer 1 Output Compare A Match Interrupt Enable
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
}
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <SCH_Start>:
 
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
 1a4:	78 94       	sei
 1a6:	08 95       	ret

000001a8 <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
 1c2:	e2 e0       	ldi	r30, 0x02	; 2
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	25 e2       	ldi	r18, 0x25	; 37
 1c8:	31 e0       	ldi	r19, 0x01	; 1
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	89 2b       	or	r24, r25
 1d0:	91 f0       	breq	.+36     	; 0x1f6 <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	93 81       	ldd	r25, Z+3	; 0x03
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
 1da:	86 81       	ldd	r24, Z+6	; 0x06
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
 1e0:	84 81       	ldd	r24, Z+4	; 0x04
 1e2:	95 81       	ldd	r25, Z+5	; 0x05
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	93 83       	std	Z+3, r25	; 0x03
 1ec:	82 83       	std	Z+2, r24	; 0x02
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	93 83       	std	Z+3, r25	; 0x03
 1f4:	82 83       	std	Z+2, r24	; 0x02
 1f6:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 1f8:	e2 17       	cp	r30, r18
 1fa:	f3 07       	cpc	r31, r19
 1fc:	31 f7       	brne	.-52     	; 0x1ca <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <USART_init>:
int temp();

// initiliseren van functies

void setup(void){
	DDRC = 0x00;
 218:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 21c:	83 e3       	ldi	r24, 0x33	; 51
 21e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 222:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 226:	88 e1       	ldi	r24, 0x18	; 24
 228:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 22c:	86 e0       	ldi	r24, 0x06	; 6
 22e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 232:	08 95       	ret

00000234 <led_init>:
 234:	20 9a       	sbi	0x04, 0	; 4
 236:	21 9a       	sbi	0x04, 1	; 4
 238:	22 9a       	sbi	0x04, 2	; 4
 23a:	08 95       	ret

0000023c <send>:
 23c:	e0 ec       	ldi	r30, 0xC0	; 192
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	90 81       	ld	r25, Z
 242:	95 ff       	sbrs	r25, 5
 244:	fd cf       	rjmp	.-6      	; 0x240 <send+0x4>
 246:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 24a:	08 95       	ret

0000024c <USART_putstring>:
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	ec 01       	movw	r28, r24
 252:	88 81       	ld	r24, Y
 254:	88 23       	and	r24, r24
 256:	31 f0       	breq	.+12     	; 0x264 <USART_putstring+0x18>
 258:	21 96       	adiw	r28, 0x01	; 1
 25a:	0e 94 1e 01 	call	0x23c	; 0x23c <send>
 25e:	89 91       	ld	r24, Y+
 260:	81 11       	cpse	r24, r1
 262:	fb cf       	rjmp	.-10     	; 0x25a <USART_putstring+0xe>
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <UU_PutNumber>:
 26a:	8f 92       	push	r8
 26c:	9f 92       	push	r9
 26e:	af 92       	push	r10
 270:	bf 92       	push	r11
 272:	ef 92       	push	r14
 274:	ff 92       	push	r15
 276:	0f 93       	push	r16
 278:	1f 93       	push	r17
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
 282:	2a 97       	sbiw	r28, 0x0a	; 10
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	f8 94       	cli
 288:	de bf       	out	0x3e, r29	; 62
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	cd bf       	out	0x3d, r28	; 61
 28e:	9e 01       	movw	r18, r28
 290:	2f 5f       	subi	r18, 0xFF	; 255
 292:	3f 4f       	sbci	r19, 0xFF	; 255
 294:	79 01       	movw	r14, r18
 296:	00 e0       	ldi	r16, 0x00	; 0
 298:	10 e0       	ldi	r17, 0x00	; 0
 29a:	0f 2e       	mov	r0, r31
 29c:	fa e0       	ldi	r31, 0x0A	; 10
 29e:	8f 2e       	mov	r8, r31
 2a0:	91 2c       	mov	r9, r1
 2a2:	a1 2c       	mov	r10, r1
 2a4:	b1 2c       	mov	r11, r1
 2a6:	f0 2d       	mov	r31, r0
 2a8:	0f 5f       	subi	r16, 0xFF	; 255
 2aa:	1f 4f       	sbci	r17, 0xFF	; 255
 2ac:	a5 01       	movw	r20, r10
 2ae:	94 01       	movw	r18, r8
 2b0:	0e 94 1e 04 	call	0x83c	; 0x83c <__udivmodsi4>
 2b4:	60 5d       	subi	r22, 0xD0	; 208
 2b6:	f7 01       	movw	r30, r14
 2b8:	61 93       	st	Z+, r22
 2ba:	7f 01       	movw	r14, r30
 2bc:	62 2f       	mov	r22, r18
 2be:	73 2f       	mov	r23, r19
 2c0:	84 2f       	mov	r24, r20
 2c2:	95 2f       	mov	r25, r21
 2c4:	61 15       	cp	r22, r1
 2c6:	71 05       	cpc	r23, r1
 2c8:	81 05       	cpc	r24, r1
 2ca:	91 05       	cpc	r25, r1
 2cc:	69 f7       	brne	.-38     	; 0x2a8 <UU_PutNumber+0x3e>
 2ce:	01 15       	cp	r16, r1
 2d0:	11 05       	cpc	r17, r1
 2d2:	89 f0       	breq	.+34     	; 0x2f6 <UU_PutNumber+0x8c>
 2d4:	ee 24       	eor	r14, r14
 2d6:	e3 94       	inc	r14
 2d8:	f1 2c       	mov	r15, r1
 2da:	ec 0e       	add	r14, r28
 2dc:	fd 1e       	adc	r15, r29
 2de:	e0 0e       	add	r14, r16
 2e0:	f1 1e       	adc	r15, r17
 2e2:	01 50       	subi	r16, 0x01	; 1
 2e4:	11 09       	sbc	r17, r1
 2e6:	f7 01       	movw	r30, r14
 2e8:	82 91       	ld	r24, -Z
 2ea:	7f 01       	movw	r14, r30
 2ec:	0e 94 1e 01 	call	0x23c	; 0x23c <send>
 2f0:	01 15       	cp	r16, r1
 2f2:	11 05       	cpc	r17, r1
 2f4:	b1 f7       	brne	.-20     	; 0x2e2 <UU_PutNumber+0x78>
 2f6:	2a 96       	adiw	r28, 0x0a	; 10
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	f8 94       	cli
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	cd bf       	out	0x3d, r28	; 61
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	1f 91       	pop	r17
 308:	0f 91       	pop	r16
 30a:	ff 90       	pop	r15
 30c:	ef 90       	pop	r14
 30e:	bf 90       	pop	r11
 310:	af 90       	pop	r10
 312:	9f 90       	pop	r9
 314:	8f 90       	pop	r8
 316:	08 95       	ret

00000318 <knipperlicht>:
 318:	8a 30       	cpi	r24, 0x0A	; 10
 31a:	c8 f4       	brcc	.+50     	; 0x34e <knipperlicht+0x36>
 31c:	2a 9a       	sbi	0x05, 2	; 5
 31e:	2f ef       	ldi	r18, 0xFF	; 255
 320:	34 e3       	ldi	r19, 0x34	; 52
 322:	9c e0       	ldi	r25, 0x0C	; 12
 324:	21 50       	subi	r18, 0x01	; 1
 326:	30 40       	sbci	r19, 0x00	; 0
 328:	90 40       	sbci	r25, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <knipperlicht+0xc>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <knipperlicht+0x16>
 32e:	00 00       	nop
 330:	95 b1       	in	r25, 0x05	; 5
 332:	93 70       	andi	r25, 0x03	; 3
 334:	95 b9       	out	0x05, r25	; 5
 336:	2f ef       	ldi	r18, 0xFF	; 255
 338:	34 e3       	ldi	r19, 0x34	; 52
 33a:	9c e0       	ldi	r25, 0x0C	; 12
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	30 40       	sbci	r19, 0x00	; 0
 340:	90 40       	sbci	r25, 0x00	; 0
 342:	e1 f7       	brne	.-8      	; 0x33c <knipperlicht+0x24>
 344:	00 c0       	rjmp	.+0      	; 0x346 <knipperlicht+0x2e>
 346:	00 00       	nop
 348:	8f 5f       	subi	r24, 0xFF	; 255
 34a:	8a 30       	cpi	r24, 0x0A	; 10
 34c:	39 f7       	brne	.-50     	; 0x31c <knipperlicht+0x4>
 34e:	08 95       	ret

00000350 <naar_boven>:
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	85 b9       	out	0x05, r24	; 5
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	0e 94 8c 01 	call	0x318	; 0x318 <knipperlicht>
 35a:	08 95       	ret

0000035c <naar_beneden>:
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	85 b9       	out	0x05, r24	; 5
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 8c 01 	call	0x318	; 0x318 <knipperlicht>
 366:	08 95       	ret

00000368 <receive>:
 368:	e0 ec       	ldi	r30, 0xC0	; 192
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	80 81       	ld	r24, Z
 36e:	88 23       	and	r24, r24
 370:	ec f7       	brge	.-6      	; 0x36c <receive+0x4>
 372:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 376:	8f 36       	cpi	r24, 0x6F	; 111
 378:	11 f4       	brne	.+4      	; 0x37e <receive+0x16>
 37a:	0e 94 a8 01 	call	0x350	; 0x350 <naar_boven>
 37e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 382:	84 36       	cpi	r24, 0x64	; 100
 384:	11 f4       	brne	.+4      	; 0x38a <receive+0x22>
 386:	0e 94 ae 01 	call	0x35c	; 0x35c <naar_beneden>
 38a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 38e:	83 37       	cpi	r24, 0x73	; 115
 390:	09 f4       	brne	.+2      	; 0x394 <receive+0x2c>
 392:	15 b8       	out	0x05, r1	; 5
 394:	08 95       	ret

00000396 <adc_init>:
}

void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
 396:	80 e4       	ldi	r24, 0x40	; 64
 398:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 39c:	87 e8       	ldi	r24, 0x87	; 135
 39e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 3a2:	08 95       	ret

000003a4 <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
 3a4:	ec e7       	ldi	r30, 0x7C	; 124
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	90 81       	ld	r25, Z
 3aa:	98 7f       	andi	r25, 0xF8	; 248
 3ac:	87 70       	andi	r24, 0x07	; 7
 3ae:	89 2b       	or	r24, r25
 3b0:	80 83       	st	Z, r24
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
 3b2:	ea e7       	ldi	r30, 0x7A	; 122
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	80 64       	ori	r24, 0x40	; 64
 3ba:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
 3bc:	80 81       	ld	r24, Z
 3be:	86 fd       	sbrc	r24, 6
 3c0:	fd cf       	rjmp	.-6      	; 0x3bc <adc_read+0x18>
	
	return (ADC);
 3c2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 3c6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 3ca:	08 95       	ret

000003cc <licht_waarde>:

int licht_waarde(){
	int result;
	adc_result0 = adc_read(0);      // read adc value at PA0
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <adc_read>
 3d2:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <adc_result0+0x1>
 3d6:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <adc_result0>
	if (adc_result0 < 150)
 3da:	86 39       	cpi	r24, 0x96	; 150
 3dc:	91 05       	cpc	r25, r1
 3de:	88 f0       	brcs	.+34     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	{
		result = 0;
		return result;
	}
	if (adc_result0 >150 && adc_result0 <300)
 3e0:	9c 01       	movw	r18, r24
 3e2:	27 59       	subi	r18, 0x97	; 151
 3e4:	31 09       	sbc	r19, r1
 3e6:	25 39       	cpi	r18, 0x95	; 149
 3e8:	31 05       	cpc	r19, r1
 3ea:	70 f0       	brcs	.+28     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	{
		result = 1;
		return result;
	}
	if (adc_result0 >300 && adc_result0 <750)
 3ec:	26 59       	subi	r18, 0x96	; 150
 3ee:	31 09       	sbc	r19, r1
 3f0:	21 3c       	cpi	r18, 0xC1	; 193
 3f2:	31 40       	sbci	r19, 0x01	; 1
 3f4:	60 f0       	brcs	.+24     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	{
		result = 2;
		return result;
	}
	if (adc_result0 > 750)
 3f6:	8f 3e       	cpi	r24, 0xEF	; 239
 3f8:	92 40       	sbci	r25, 0x02	; 2
 3fa:	60 f4       	brcc	.+24     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	{
		result = 3;
		return result;
	}
	return result = 100;
 3fc:	84 e6       	ldi	r24, 0x64	; 100
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	08 95       	ret
	int result;
	adc_result0 = adc_read(0);      // read adc value at PA0
	if (adc_result0 < 150)
	{
		result = 0;
		return result;
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	08 95       	ret
	}
	if (adc_result0 >150 && adc_result0 <300)
	{
		result = 1;
		return result;
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	08 95       	ret
	}
	if (adc_result0 >300 && adc_result0 <750)
	{
		result = 2;
		return result;
 40e:	82 e0       	ldi	r24, 0x02	; 2
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	08 95       	ret
	}
	if (adc_result0 > 750)
	{
		result = 3;
		return result;
 414:	83 e0       	ldi	r24, 0x03	; 3
 416:	90 e0       	ldi	r25, 0x00	; 0
	}
	return result = 100;
}
 418:	08 95       	ret

0000041a <temp>:

int temp(){
	adc_result1 = adc_read(1);
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <adc_read>
 420:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <adc_result1+0x1>
 424:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <adc_result1>
	float voltage = adc_result1 * 5.0;
 428:	bc 01       	movw	r22, r24
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 23 03 	call	0x646	; 0x646 <__floatunsisf>
 432:	20 e0       	ldi	r18, 0x00	; 0
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	40 ea       	ldi	r20, 0xA0	; 160
 438:	50 e4       	ldi	r21, 0x40	; 64
 43a:	0e 94 b1 03 	call	0x762	; 0x762 <__mulsf3>
	voltage /= 1024.0;
	float temperatureC = (voltage - 0.5) * 10;
	int temp_int = temperatureC * 100;
	return temp_int;
 43e:	20 e0       	ldi	r18, 0x00	; 0
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	40 e8       	ldi	r20, 0x80	; 128
 444:	5a e3       	ldi	r21, 0x3A	; 58
 446:	0e 94 b1 03 	call	0x762	; 0x762 <__mulsf3>
 44a:	20 e0       	ldi	r18, 0x00	; 0
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	40 e0       	ldi	r20, 0x00	; 0
 450:	5f e3       	ldi	r21, 0x3F	; 63
 452:	0e 94 80 02 	call	0x500	; 0x500 <__subsf3>
 456:	20 e0       	ldi	r18, 0x00	; 0
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	40 e2       	ldi	r20, 0x20	; 32
 45c:	51 e4       	ldi	r21, 0x41	; 65
 45e:	0e 94 b1 03 	call	0x762	; 0x762 <__mulsf3>
 462:	20 e0       	ldi	r18, 0x00	; 0
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	48 ec       	ldi	r20, 0xC8	; 200
 468:	52 e4       	ldi	r21, 0x42	; 66
 46a:	0e 94 b1 03 	call	0x762	; 0x762 <__mulsf3>
 46e:	0e 94 ed 02 	call	0x5da	; 0x5da <__fixsfsi>
}
 472:	cb 01       	movw	r24, r22
 474:	08 95       	ret

00000476 <send_data>:


void send_data(void){
	USART_putstring("x");
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	91 e0       	ldi	r25, 0x01	; 1
 47a:	0e 94 26 01 	call	0x24c	; 0x24c <USART_putstring>
	UU_PutNumber(licht_waarde());
 47e:	0e 94 e6 01 	call	0x3cc	; 0x3cc <licht_waarde>
 482:	bc 01       	movw	r22, r24
 484:	99 0f       	add	r25, r25
 486:	88 0b       	sbc	r24, r24
 488:	99 0b       	sbc	r25, r25
 48a:	0e 94 35 01 	call	0x26a	; 0x26a <UU_PutNumber>
	UU_PutNumber(temp());
 48e:	0e 94 0d 02 	call	0x41a	; 0x41a <temp>
 492:	bc 01       	movw	r22, r24
 494:	99 0f       	add	r25, r25
 496:	88 0b       	sbc	r24, r24
 498:	99 0b       	sbc	r25, r25
 49a:	0e 94 35 01 	call	0x26a	; 0x26a <UU_PutNumber>
 49e:	08 95       	ret

000004a0 <main>:
int temp();

// initiliseren van functies

void setup(void){
	DDRC = 0x00;
 4a0:	17 b8       	out	0x07, r1	; 7
}

int main()
{
	setup();
	led_init();
 4a2:	0e 94 1a 01 	call	0x234	; 0x234 <led_init>
	adc_init();
 4a6:	0e 94 cb 01 	call	0x396	; 0x396 <adc_init>
	USART_init();
 4aa:	0e 94 0c 01 	call	0x218	; 0x218 <USART_init>
	
	SCH_Init_T1();
 4ae:	0e 94 bc 00 	call	0x178	; 0x178 <SCH_Init_T1>
	SCH_Add_Task(temp,0,400);
 4b2:	40 e9       	ldi	r20, 0x90	; 144
 4b4:	51 e0       	ldi	r21, 0x01	; 1
 4b6:	60 e0       	ldi	r22, 0x00	; 0
 4b8:	70 e0       	ldi	r23, 0x00	; 0
 4ba:	8d e0       	ldi	r24, 0x0D	; 13
 4bc:	92 e0       	ldi	r25, 0x02	; 2
 4be:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(licht_waarde,0,300);
 4c2:	4c e2       	ldi	r20, 0x2C	; 44
 4c4:	51 e0       	ldi	r21, 0x01	; 1
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	86 ee       	ldi	r24, 0xE6	; 230
 4cc:	91 e0       	ldi	r25, 0x01	; 1
 4ce:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(send_data,0,600);
 4d2:	48 e5       	ldi	r20, 0x58	; 88
 4d4:	52 e0       	ldi	r21, 0x02	; 2
 4d6:	60 e0       	ldi	r22, 0x00	; 0
 4d8:	70 e0       	ldi	r23, 0x00	; 0
 4da:	8b e3       	ldi	r24, 0x3B	; 59
 4dc:	92 e0       	ldi	r25, 0x02	; 2
 4de:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(receive,0,10);
 4e2:	4a e0       	ldi	r20, 0x0A	; 10
 4e4:	50 e0       	ldi	r21, 0x00	; 0
 4e6:	60 e0       	ldi	r22, 0x00	; 0
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	84 eb       	ldi	r24, 0xB4	; 180
 4ec:	91 e0       	ldi	r25, 0x01	; 1
 4ee:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	
	SCH_Start();
 4f2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SCH_Start>
	while(1){
		SCH_Dispatch_Tasks();
 4f6:	0e 94 98 00 	call	0x130	; 0x130 <SCH_Dispatch_Tasks>
		receive();
 4fa:	0e 94 b4 01 	call	0x368	; 0x368 <receive>
 4fe:	fb cf       	rjmp	.-10     	; 0x4f6 <main+0x56>

00000500 <__subsf3>:
 500:	50 58       	subi	r21, 0x80	; 128

00000502 <__addsf3>:
 502:	bb 27       	eor	r27, r27
 504:	aa 27       	eor	r26, r26
 506:	0e 94 98 02 	call	0x530	; 0x530 <__addsf3x>
 50a:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__fp_round>
 50e:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__fp_pscA>
 512:	38 f0       	brcs	.+14     	; 0x522 <__addsf3+0x20>
 514:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__fp_pscB>
 518:	20 f0       	brcs	.+8      	; 0x522 <__addsf3+0x20>
 51a:	39 f4       	brne	.+14     	; 0x52a <__addsf3+0x28>
 51c:	9f 3f       	cpi	r25, 0xFF	; 255
 51e:	19 f4       	brne	.+6      	; 0x526 <__addsf3+0x24>
 520:	26 f4       	brtc	.+8      	; 0x52a <__addsf3+0x28>
 522:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__fp_nan>
 526:	0e f4       	brtc	.+2      	; 0x52a <__addsf3+0x28>
 528:	e0 95       	com	r30
 52a:	e7 fb       	bst	r30, 7
 52c:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__fp_inf>

00000530 <__addsf3x>:
 530:	e9 2f       	mov	r30, r25
 532:	0e 94 88 03 	call	0x710	; 0x710 <__fp_split3>
 536:	58 f3       	brcs	.-42     	; 0x50e <__addsf3+0xc>
 538:	ba 17       	cp	r27, r26
 53a:	62 07       	cpc	r22, r18
 53c:	73 07       	cpc	r23, r19
 53e:	84 07       	cpc	r24, r20
 540:	95 07       	cpc	r25, r21
 542:	20 f0       	brcs	.+8      	; 0x54c <__addsf3x+0x1c>
 544:	79 f4       	brne	.+30     	; 0x564 <__addsf3x+0x34>
 546:	a6 f5       	brtc	.+104    	; 0x5b0 <__addsf3x+0x80>
 548:	0c 94 aa 03 	jmp	0x754	; 0x754 <__fp_zero>
 54c:	0e f4       	brtc	.+2      	; 0x550 <__addsf3x+0x20>
 54e:	e0 95       	com	r30
 550:	0b 2e       	mov	r0, r27
 552:	ba 2f       	mov	r27, r26
 554:	a0 2d       	mov	r26, r0
 556:	0b 01       	movw	r0, r22
 558:	b9 01       	movw	r22, r18
 55a:	90 01       	movw	r18, r0
 55c:	0c 01       	movw	r0, r24
 55e:	ca 01       	movw	r24, r20
 560:	a0 01       	movw	r20, r0
 562:	11 24       	eor	r1, r1
 564:	ff 27       	eor	r31, r31
 566:	59 1b       	sub	r21, r25
 568:	99 f0       	breq	.+38     	; 0x590 <__addsf3x+0x60>
 56a:	59 3f       	cpi	r21, 0xF9	; 249
 56c:	50 f4       	brcc	.+20     	; 0x582 <__addsf3x+0x52>
 56e:	50 3e       	cpi	r21, 0xE0	; 224
 570:	68 f1       	brcs	.+90     	; 0x5cc <__addsf3x+0x9c>
 572:	1a 16       	cp	r1, r26
 574:	f0 40       	sbci	r31, 0x00	; 0
 576:	a2 2f       	mov	r26, r18
 578:	23 2f       	mov	r18, r19
 57a:	34 2f       	mov	r19, r20
 57c:	44 27       	eor	r20, r20
 57e:	58 5f       	subi	r21, 0xF8	; 248
 580:	f3 cf       	rjmp	.-26     	; 0x568 <__addsf3x+0x38>
 582:	46 95       	lsr	r20
 584:	37 95       	ror	r19
 586:	27 95       	ror	r18
 588:	a7 95       	ror	r26
 58a:	f0 40       	sbci	r31, 0x00	; 0
 58c:	53 95       	inc	r21
 58e:	c9 f7       	brne	.-14     	; 0x582 <__addsf3x+0x52>
 590:	7e f4       	brtc	.+30     	; 0x5b0 <__addsf3x+0x80>
 592:	1f 16       	cp	r1, r31
 594:	ba 0b       	sbc	r27, r26
 596:	62 0b       	sbc	r22, r18
 598:	73 0b       	sbc	r23, r19
 59a:	84 0b       	sbc	r24, r20
 59c:	ba f0       	brmi	.+46     	; 0x5cc <__addsf3x+0x9c>
 59e:	91 50       	subi	r25, 0x01	; 1
 5a0:	a1 f0       	breq	.+40     	; 0x5ca <__addsf3x+0x9a>
 5a2:	ff 0f       	add	r31, r31
 5a4:	bb 1f       	adc	r27, r27
 5a6:	66 1f       	adc	r22, r22
 5a8:	77 1f       	adc	r23, r23
 5aa:	88 1f       	adc	r24, r24
 5ac:	c2 f7       	brpl	.-16     	; 0x59e <__addsf3x+0x6e>
 5ae:	0e c0       	rjmp	.+28     	; 0x5cc <__addsf3x+0x9c>
 5b0:	ba 0f       	add	r27, r26
 5b2:	62 1f       	adc	r22, r18
 5b4:	73 1f       	adc	r23, r19
 5b6:	84 1f       	adc	r24, r20
 5b8:	48 f4       	brcc	.+18     	; 0x5cc <__addsf3x+0x9c>
 5ba:	87 95       	ror	r24
 5bc:	77 95       	ror	r23
 5be:	67 95       	ror	r22
 5c0:	b7 95       	ror	r27
 5c2:	f7 95       	ror	r31
 5c4:	9e 3f       	cpi	r25, 0xFE	; 254
 5c6:	08 f0       	brcs	.+2      	; 0x5ca <__addsf3x+0x9a>
 5c8:	b0 cf       	rjmp	.-160    	; 0x52a <__addsf3+0x28>
 5ca:	93 95       	inc	r25
 5cc:	88 0f       	add	r24, r24
 5ce:	08 f0       	brcs	.+2      	; 0x5d2 <__addsf3x+0xa2>
 5d0:	99 27       	eor	r25, r25
 5d2:	ee 0f       	add	r30, r30
 5d4:	97 95       	ror	r25
 5d6:	87 95       	ror	r24
 5d8:	08 95       	ret

000005da <__fixsfsi>:
 5da:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__fixunssfsi>
 5de:	68 94       	set
 5e0:	b1 11       	cpse	r27, r1
 5e2:	0c 94 ab 03 	jmp	0x756	; 0x756 <__fp_szero>
 5e6:	08 95       	ret

000005e8 <__fixunssfsi>:
 5e8:	0e 94 90 03 	call	0x720	; 0x720 <__fp_splitA>
 5ec:	88 f0       	brcs	.+34     	; 0x610 <__fixunssfsi+0x28>
 5ee:	9f 57       	subi	r25, 0x7F	; 127
 5f0:	98 f0       	brcs	.+38     	; 0x618 <__fixunssfsi+0x30>
 5f2:	b9 2f       	mov	r27, r25
 5f4:	99 27       	eor	r25, r25
 5f6:	b7 51       	subi	r27, 0x17	; 23
 5f8:	b0 f0       	brcs	.+44     	; 0x626 <__fixunssfsi+0x3e>
 5fa:	e1 f0       	breq	.+56     	; 0x634 <__fixunssfsi+0x4c>
 5fc:	66 0f       	add	r22, r22
 5fe:	77 1f       	adc	r23, r23
 600:	88 1f       	adc	r24, r24
 602:	99 1f       	adc	r25, r25
 604:	1a f0       	brmi	.+6      	; 0x60c <__fixunssfsi+0x24>
 606:	ba 95       	dec	r27
 608:	c9 f7       	brne	.-14     	; 0x5fc <__fixunssfsi+0x14>
 60a:	14 c0       	rjmp	.+40     	; 0x634 <__fixunssfsi+0x4c>
 60c:	b1 30       	cpi	r27, 0x01	; 1
 60e:	91 f0       	breq	.+36     	; 0x634 <__fixunssfsi+0x4c>
 610:	0e 94 aa 03 	call	0x754	; 0x754 <__fp_zero>
 614:	b1 e0       	ldi	r27, 0x01	; 1
 616:	08 95       	ret
 618:	0c 94 aa 03 	jmp	0x754	; 0x754 <__fp_zero>
 61c:	67 2f       	mov	r22, r23
 61e:	78 2f       	mov	r23, r24
 620:	88 27       	eor	r24, r24
 622:	b8 5f       	subi	r27, 0xF8	; 248
 624:	39 f0       	breq	.+14     	; 0x634 <__fixunssfsi+0x4c>
 626:	b9 3f       	cpi	r27, 0xF9	; 249
 628:	cc f3       	brlt	.-14     	; 0x61c <__fixunssfsi+0x34>
 62a:	86 95       	lsr	r24
 62c:	77 95       	ror	r23
 62e:	67 95       	ror	r22
 630:	b3 95       	inc	r27
 632:	d9 f7       	brne	.-10     	; 0x62a <__fixunssfsi+0x42>
 634:	3e f4       	brtc	.+14     	; 0x644 <__fixunssfsi+0x5c>
 636:	90 95       	com	r25
 638:	80 95       	com	r24
 63a:	70 95       	com	r23
 63c:	61 95       	neg	r22
 63e:	7f 4f       	sbci	r23, 0xFF	; 255
 640:	8f 4f       	sbci	r24, 0xFF	; 255
 642:	9f 4f       	sbci	r25, 0xFF	; 255
 644:	08 95       	ret

00000646 <__floatunsisf>:
 646:	e8 94       	clt
 648:	09 c0       	rjmp	.+18     	; 0x65c <__floatsisf+0x12>

0000064a <__floatsisf>:
 64a:	97 fb       	bst	r25, 7
 64c:	3e f4       	brtc	.+14     	; 0x65c <__floatsisf+0x12>
 64e:	90 95       	com	r25
 650:	80 95       	com	r24
 652:	70 95       	com	r23
 654:	61 95       	neg	r22
 656:	7f 4f       	sbci	r23, 0xFF	; 255
 658:	8f 4f       	sbci	r24, 0xFF	; 255
 65a:	9f 4f       	sbci	r25, 0xFF	; 255
 65c:	99 23       	and	r25, r25
 65e:	a9 f0       	breq	.+42     	; 0x68a <__floatsisf+0x40>
 660:	f9 2f       	mov	r31, r25
 662:	96 e9       	ldi	r25, 0x96	; 150
 664:	bb 27       	eor	r27, r27
 666:	93 95       	inc	r25
 668:	f6 95       	lsr	r31
 66a:	87 95       	ror	r24
 66c:	77 95       	ror	r23
 66e:	67 95       	ror	r22
 670:	b7 95       	ror	r27
 672:	f1 11       	cpse	r31, r1
 674:	f8 cf       	rjmp	.-16     	; 0x666 <__floatsisf+0x1c>
 676:	fa f4       	brpl	.+62     	; 0x6b6 <__floatsisf+0x6c>
 678:	bb 0f       	add	r27, r27
 67a:	11 f4       	brne	.+4      	; 0x680 <__floatsisf+0x36>
 67c:	60 ff       	sbrs	r22, 0
 67e:	1b c0       	rjmp	.+54     	; 0x6b6 <__floatsisf+0x6c>
 680:	6f 5f       	subi	r22, 0xFF	; 255
 682:	7f 4f       	sbci	r23, 0xFF	; 255
 684:	8f 4f       	sbci	r24, 0xFF	; 255
 686:	9f 4f       	sbci	r25, 0xFF	; 255
 688:	16 c0       	rjmp	.+44     	; 0x6b6 <__floatsisf+0x6c>
 68a:	88 23       	and	r24, r24
 68c:	11 f0       	breq	.+4      	; 0x692 <__floatsisf+0x48>
 68e:	96 e9       	ldi	r25, 0x96	; 150
 690:	11 c0       	rjmp	.+34     	; 0x6b4 <__floatsisf+0x6a>
 692:	77 23       	and	r23, r23
 694:	21 f0       	breq	.+8      	; 0x69e <__floatsisf+0x54>
 696:	9e e8       	ldi	r25, 0x8E	; 142
 698:	87 2f       	mov	r24, r23
 69a:	76 2f       	mov	r23, r22
 69c:	05 c0       	rjmp	.+10     	; 0x6a8 <__floatsisf+0x5e>
 69e:	66 23       	and	r22, r22
 6a0:	71 f0       	breq	.+28     	; 0x6be <__floatsisf+0x74>
 6a2:	96 e8       	ldi	r25, 0x86	; 134
 6a4:	86 2f       	mov	r24, r22
 6a6:	70 e0       	ldi	r23, 0x00	; 0
 6a8:	60 e0       	ldi	r22, 0x00	; 0
 6aa:	2a f0       	brmi	.+10     	; 0x6b6 <__floatsisf+0x6c>
 6ac:	9a 95       	dec	r25
 6ae:	66 0f       	add	r22, r22
 6b0:	77 1f       	adc	r23, r23
 6b2:	88 1f       	adc	r24, r24
 6b4:	da f7       	brpl	.-10     	; 0x6ac <__floatsisf+0x62>
 6b6:	88 0f       	add	r24, r24
 6b8:	96 95       	lsr	r25
 6ba:	87 95       	ror	r24
 6bc:	97 f9       	bld	r25, 7
 6be:	08 95       	ret

000006c0 <__fp_inf>:
 6c0:	97 f9       	bld	r25, 7
 6c2:	9f 67       	ori	r25, 0x7F	; 127
 6c4:	80 e8       	ldi	r24, 0x80	; 128
 6c6:	70 e0       	ldi	r23, 0x00	; 0
 6c8:	60 e0       	ldi	r22, 0x00	; 0
 6ca:	08 95       	ret

000006cc <__fp_nan>:
 6cc:	9f ef       	ldi	r25, 0xFF	; 255
 6ce:	80 ec       	ldi	r24, 0xC0	; 192
 6d0:	08 95       	ret

000006d2 <__fp_pscA>:
 6d2:	00 24       	eor	r0, r0
 6d4:	0a 94       	dec	r0
 6d6:	16 16       	cp	r1, r22
 6d8:	17 06       	cpc	r1, r23
 6da:	18 06       	cpc	r1, r24
 6dc:	09 06       	cpc	r0, r25
 6de:	08 95       	ret

000006e0 <__fp_pscB>:
 6e0:	00 24       	eor	r0, r0
 6e2:	0a 94       	dec	r0
 6e4:	12 16       	cp	r1, r18
 6e6:	13 06       	cpc	r1, r19
 6e8:	14 06       	cpc	r1, r20
 6ea:	05 06       	cpc	r0, r21
 6ec:	08 95       	ret

000006ee <__fp_round>:
 6ee:	09 2e       	mov	r0, r25
 6f0:	03 94       	inc	r0
 6f2:	00 0c       	add	r0, r0
 6f4:	11 f4       	brne	.+4      	; 0x6fa <__fp_round+0xc>
 6f6:	88 23       	and	r24, r24
 6f8:	52 f0       	brmi	.+20     	; 0x70e <__fp_round+0x20>
 6fa:	bb 0f       	add	r27, r27
 6fc:	40 f4       	brcc	.+16     	; 0x70e <__fp_round+0x20>
 6fe:	bf 2b       	or	r27, r31
 700:	11 f4       	brne	.+4      	; 0x706 <__fp_round+0x18>
 702:	60 ff       	sbrs	r22, 0
 704:	04 c0       	rjmp	.+8      	; 0x70e <__fp_round+0x20>
 706:	6f 5f       	subi	r22, 0xFF	; 255
 708:	7f 4f       	sbci	r23, 0xFF	; 255
 70a:	8f 4f       	sbci	r24, 0xFF	; 255
 70c:	9f 4f       	sbci	r25, 0xFF	; 255
 70e:	08 95       	ret

00000710 <__fp_split3>:
 710:	57 fd       	sbrc	r21, 7
 712:	90 58       	subi	r25, 0x80	; 128
 714:	44 0f       	add	r20, r20
 716:	55 1f       	adc	r21, r21
 718:	59 f0       	breq	.+22     	; 0x730 <__fp_splitA+0x10>
 71a:	5f 3f       	cpi	r21, 0xFF	; 255
 71c:	71 f0       	breq	.+28     	; 0x73a <__fp_splitA+0x1a>
 71e:	47 95       	ror	r20

00000720 <__fp_splitA>:
 720:	88 0f       	add	r24, r24
 722:	97 fb       	bst	r25, 7
 724:	99 1f       	adc	r25, r25
 726:	61 f0       	breq	.+24     	; 0x740 <__fp_splitA+0x20>
 728:	9f 3f       	cpi	r25, 0xFF	; 255
 72a:	79 f0       	breq	.+30     	; 0x74a <__fp_splitA+0x2a>
 72c:	87 95       	ror	r24
 72e:	08 95       	ret
 730:	12 16       	cp	r1, r18
 732:	13 06       	cpc	r1, r19
 734:	14 06       	cpc	r1, r20
 736:	55 1f       	adc	r21, r21
 738:	f2 cf       	rjmp	.-28     	; 0x71e <__fp_split3+0xe>
 73a:	46 95       	lsr	r20
 73c:	f1 df       	rcall	.-30     	; 0x720 <__fp_splitA>
 73e:	08 c0       	rjmp	.+16     	; 0x750 <__fp_splitA+0x30>
 740:	16 16       	cp	r1, r22
 742:	17 06       	cpc	r1, r23
 744:	18 06       	cpc	r1, r24
 746:	99 1f       	adc	r25, r25
 748:	f1 cf       	rjmp	.-30     	; 0x72c <__fp_splitA+0xc>
 74a:	86 95       	lsr	r24
 74c:	71 05       	cpc	r23, r1
 74e:	61 05       	cpc	r22, r1
 750:	08 94       	sec
 752:	08 95       	ret

00000754 <__fp_zero>:
 754:	e8 94       	clt

00000756 <__fp_szero>:
 756:	bb 27       	eor	r27, r27
 758:	66 27       	eor	r22, r22
 75a:	77 27       	eor	r23, r23
 75c:	cb 01       	movw	r24, r22
 75e:	97 f9       	bld	r25, 7
 760:	08 95       	ret

00000762 <__mulsf3>:
 762:	0e 94 c4 03 	call	0x788	; 0x788 <__mulsf3x>
 766:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__fp_round>
 76a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__fp_pscA>
 76e:	38 f0       	brcs	.+14     	; 0x77e <__mulsf3+0x1c>
 770:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__fp_pscB>
 774:	20 f0       	brcs	.+8      	; 0x77e <__mulsf3+0x1c>
 776:	95 23       	and	r25, r21
 778:	11 f0       	breq	.+4      	; 0x77e <__mulsf3+0x1c>
 77a:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__fp_inf>
 77e:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__fp_nan>
 782:	11 24       	eor	r1, r1
 784:	0c 94 ab 03 	jmp	0x756	; 0x756 <__fp_szero>

00000788 <__mulsf3x>:
 788:	0e 94 88 03 	call	0x710	; 0x710 <__fp_split3>
 78c:	70 f3       	brcs	.-36     	; 0x76a <__mulsf3+0x8>

0000078e <__mulsf3_pse>:
 78e:	95 9f       	mul	r25, r21
 790:	c1 f3       	breq	.-16     	; 0x782 <__mulsf3+0x20>
 792:	95 0f       	add	r25, r21
 794:	50 e0       	ldi	r21, 0x00	; 0
 796:	55 1f       	adc	r21, r21
 798:	62 9f       	mul	r22, r18
 79a:	f0 01       	movw	r30, r0
 79c:	72 9f       	mul	r23, r18
 79e:	bb 27       	eor	r27, r27
 7a0:	f0 0d       	add	r31, r0
 7a2:	b1 1d       	adc	r27, r1
 7a4:	63 9f       	mul	r22, r19
 7a6:	aa 27       	eor	r26, r26
 7a8:	f0 0d       	add	r31, r0
 7aa:	b1 1d       	adc	r27, r1
 7ac:	aa 1f       	adc	r26, r26
 7ae:	64 9f       	mul	r22, r20
 7b0:	66 27       	eor	r22, r22
 7b2:	b0 0d       	add	r27, r0
 7b4:	a1 1d       	adc	r26, r1
 7b6:	66 1f       	adc	r22, r22
 7b8:	82 9f       	mul	r24, r18
 7ba:	22 27       	eor	r18, r18
 7bc:	b0 0d       	add	r27, r0
 7be:	a1 1d       	adc	r26, r1
 7c0:	62 1f       	adc	r22, r18
 7c2:	73 9f       	mul	r23, r19
 7c4:	b0 0d       	add	r27, r0
 7c6:	a1 1d       	adc	r26, r1
 7c8:	62 1f       	adc	r22, r18
 7ca:	83 9f       	mul	r24, r19
 7cc:	a0 0d       	add	r26, r0
 7ce:	61 1d       	adc	r22, r1
 7d0:	22 1f       	adc	r18, r18
 7d2:	74 9f       	mul	r23, r20
 7d4:	33 27       	eor	r19, r19
 7d6:	a0 0d       	add	r26, r0
 7d8:	61 1d       	adc	r22, r1
 7da:	23 1f       	adc	r18, r19
 7dc:	84 9f       	mul	r24, r20
 7de:	60 0d       	add	r22, r0
 7e0:	21 1d       	adc	r18, r1
 7e2:	82 2f       	mov	r24, r18
 7e4:	76 2f       	mov	r23, r22
 7e6:	6a 2f       	mov	r22, r26
 7e8:	11 24       	eor	r1, r1
 7ea:	9f 57       	subi	r25, 0x7F	; 127
 7ec:	50 40       	sbci	r21, 0x00	; 0
 7ee:	9a f0       	brmi	.+38     	; 0x816 <__mulsf3_pse+0x88>
 7f0:	f1 f0       	breq	.+60     	; 0x82e <__mulsf3_pse+0xa0>
 7f2:	88 23       	and	r24, r24
 7f4:	4a f0       	brmi	.+18     	; 0x808 <__mulsf3_pse+0x7a>
 7f6:	ee 0f       	add	r30, r30
 7f8:	ff 1f       	adc	r31, r31
 7fa:	bb 1f       	adc	r27, r27
 7fc:	66 1f       	adc	r22, r22
 7fe:	77 1f       	adc	r23, r23
 800:	88 1f       	adc	r24, r24
 802:	91 50       	subi	r25, 0x01	; 1
 804:	50 40       	sbci	r21, 0x00	; 0
 806:	a9 f7       	brne	.-22     	; 0x7f2 <__mulsf3_pse+0x64>
 808:	9e 3f       	cpi	r25, 0xFE	; 254
 80a:	51 05       	cpc	r21, r1
 80c:	80 f0       	brcs	.+32     	; 0x82e <__mulsf3_pse+0xa0>
 80e:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__fp_inf>
 812:	0c 94 ab 03 	jmp	0x756	; 0x756 <__fp_szero>
 816:	5f 3f       	cpi	r21, 0xFF	; 255
 818:	e4 f3       	brlt	.-8      	; 0x812 <__mulsf3_pse+0x84>
 81a:	98 3e       	cpi	r25, 0xE8	; 232
 81c:	d4 f3       	brlt	.-12     	; 0x812 <__mulsf3_pse+0x84>
 81e:	86 95       	lsr	r24
 820:	77 95       	ror	r23
 822:	67 95       	ror	r22
 824:	b7 95       	ror	r27
 826:	f7 95       	ror	r31
 828:	e7 95       	ror	r30
 82a:	9f 5f       	subi	r25, 0xFF	; 255
 82c:	c1 f7       	brne	.-16     	; 0x81e <__mulsf3_pse+0x90>
 82e:	fe 2b       	or	r31, r30
 830:	88 0f       	add	r24, r24
 832:	91 1d       	adc	r25, r1
 834:	96 95       	lsr	r25
 836:	87 95       	ror	r24
 838:	97 f9       	bld	r25, 7
 83a:	08 95       	ret

0000083c <__udivmodsi4>:
 83c:	a1 e2       	ldi	r26, 0x21	; 33
 83e:	1a 2e       	mov	r1, r26
 840:	aa 1b       	sub	r26, r26
 842:	bb 1b       	sub	r27, r27
 844:	fd 01       	movw	r30, r26
 846:	0d c0       	rjmp	.+26     	; 0x862 <__udivmodsi4_ep>

00000848 <__udivmodsi4_loop>:
 848:	aa 1f       	adc	r26, r26
 84a:	bb 1f       	adc	r27, r27
 84c:	ee 1f       	adc	r30, r30
 84e:	ff 1f       	adc	r31, r31
 850:	a2 17       	cp	r26, r18
 852:	b3 07       	cpc	r27, r19
 854:	e4 07       	cpc	r30, r20
 856:	f5 07       	cpc	r31, r21
 858:	20 f0       	brcs	.+8      	; 0x862 <__udivmodsi4_ep>
 85a:	a2 1b       	sub	r26, r18
 85c:	b3 0b       	sbc	r27, r19
 85e:	e4 0b       	sbc	r30, r20
 860:	f5 0b       	sbc	r31, r21

00000862 <__udivmodsi4_ep>:
 862:	66 1f       	adc	r22, r22
 864:	77 1f       	adc	r23, r23
 866:	88 1f       	adc	r24, r24
 868:	99 1f       	adc	r25, r25
 86a:	1a 94       	dec	r1
 86c:	69 f7       	brne	.-38     	; 0x848 <__udivmodsi4_loop>
 86e:	60 95       	com	r22
 870:	70 95       	com	r23
 872:	80 95       	com	r24
 874:	90 95       	com	r25
 876:	9b 01       	movw	r18, r22
 878:	ac 01       	movw	r20, r24
 87a:	bd 01       	movw	r22, r26
 87c:	cf 01       	movw	r24, r30
 87e:	08 95       	ret

00000880 <_exit>:
 880:	f8 94       	cli

00000882 <__stop_program>:
 882:	ff cf       	rjmp	.-2      	; 0x882 <__stop_program>
